<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.8/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.8/ http://www.mediawiki.org/xml/export-0.8.xsd" version="0.8" xml:lang="en">
  <siteinfo>
    <sitename>jQuery Wiki</sitename>
    <base>http://docs.jquery.com/Main_Page</base>
    <generator>MediaWiki 1.22alpha</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Project</namespace>
      <namespace key="5" case="first-letter">Project talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Plugins/Validation</title>
    <ns>0</ns>
    <id>2286</id>
    <revision>
      <id>21347</id>
      <parentid>21283</parentid>
      <timestamp>2013-05-12T16:00:35Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="11851">[http://bassistance.de/jquery-plugins/jquery-plugin-validation/ &amp;laquo; Back to the jQuery Validation Plugin page]

== Validate forms like you've never been validating before! ==

'''&quot;But doesn't jQuery make it so very easy to write your own validation plugin?&quot;'''
Sure, but there still are a lot of subtleties that you
have to worry about: You need a standard library of validation methods (think of emails, URLs, credit card numbers). You need to place
error messages in the DOM and show and hide them when appropriate. You want to react to more than just a submit event, like keyup and blur.
You may need different ways to specify validation rules, based on the server-side enviroment you are using on different projects. And after all,
you don't want to reinvent the wheel, do you?

'''&quot;But aren't there already a ton of validation plugins out there?&quot;'''
Right, there are a lot of non-jQuery-based solutions (which you'd avoid since you found jQuery) and some jQuery-based solutions. This particular one you are looking at is one of the oldest jQuery plugins (started in July 2006) and
proved itself in projects all around the world. There is also an [http://bassistance.de/2007/07/04/about-client-side-form-validation-and-frameworks/ article]
discussing how this plugin fits the bill of the should-be validation solution.

Not convinced? Have a look at this example:

== Example ==
{{APIExample|
|height=260
|desc=Validating a comment form.
|code=$(&quot;#commentForm&quot;).validate();
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;style type=&quot;text/css&quot;&gt;
* { font-family: Verdana; font-size: 96%; }
label { width: 10em; float: left; }
label.error { float: none; color: red; padding-left: .5em; vertical-align: top; }
p { clear: both; }
.submit { margin-left: 12em; }
em { font-weight: bold; padding-right: 1em; vertical-align: top; }
&lt;/style&gt;&lt;/nowiki&gt;
|html=&lt;nowiki&gt;

 &lt;form class=&quot;cmxform&quot; id=&quot;commentForm&quot; method=&quot;get&quot; action=&quot;&quot;&gt;
 &lt;fieldset&gt;
   &lt;legend&gt;A simple comment form with submit validation and default messages&lt;/legend&gt;
   &lt;p&gt;
     &lt;label for=&quot;cname&quot;&gt;Name&lt;/label&gt;
     &lt;em&gt;*&lt;/em&gt;&lt;input id=&quot;cname&quot; name=&quot;name&quot; size=&quot;25&quot; class=&quot;required&quot; minlength=&quot;2&quot; /&gt;
   &lt;/p&gt;
   &lt;p&gt;
     &lt;label for=&quot;cemail&quot;&gt;E-Mail&lt;/label&gt;
     &lt;em&gt;*&lt;/em&gt;&lt;input id=&quot;cemail&quot; name=&quot;email&quot; size=&quot;25&quot;  class=&quot;required email&quot; /&gt;
   &lt;/p&gt;
   &lt;p&gt;
     &lt;label for=&quot;curl&quot;&gt;URL&lt;/label&gt;
     &lt;em&gt;&amp;nbsp; &lt;/em&gt;&lt;input id=&quot;curl&quot; name=&quot;url&quot; size=&quot;25&quot;  class=&quot;url&quot; value=&quot;&quot; /&gt;
   &lt;/p&gt;
   &lt;p&gt;
     &lt;label for=&quot;ccomment&quot;&gt;Your comment&lt;/label&gt;
     &lt;em&gt;*&lt;/em&gt;&lt;textarea id=&quot;ccomment&quot; name=&quot;comment&quot; cols=&quot;22&quot;  class=&quot;required&quot;&gt;&lt;/textarea&gt;
   &lt;/p&gt;
   &lt;p&gt;
     &lt;input class=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;
   &lt;/p&gt;
 &lt;/fieldset&gt;
 &lt;/form&gt;&lt;/nowiki&gt;
}}

==== Isn't that nice and easy? ====
A single line of jQuery to select the form and apply the validation plugin. And a bit of metadata on each
element to specify the validation rules.

Of course that isn't the only way to specify rules. You also don't have to rely on those default messages, but they come in handy when starting
to setup validation for a form.

==== A few things to look for when playing around with the demo ====

* After trying to submit an invalid form, the first invalid element is focused, allowing the user to correct the field. If another invalid field, that wasn't the first one, was focused before submit, that field is focused instead, allowing the user start at the bottom, if he prefers that.
* Before a field is marked as invalid, the validation is lazy: Before submitting the form for the first time, the user can tab through fields without getting annoying messages - he won't get bugged before he had the chance to actually enter a correct value
* Once a field was marked invalid, it is eagerly validated: As soon as the user entered the necessary value, the error message is removed
* If the user enters something in a non-marked field, and tabs/clicks away from it (blur the field), it is validated - obviously the user had the intention to enter something, but failed to enter the correct value

That behaviour can be irritating when clicking through demos of the validation plugin - it is designed for an unobtrusive user experience, annoying the user as little as possible with unnecessary error messages. So when you try out other demos, try to react like one of your users would, and see if the behaviour is better then. If not, please let me know about any ideas you may have for improvements!

== API Documentation ==

You're likely looking for

=== [[Plugins/Validation/validate#toptions|Options for the validate() method]] ===

If not, read on.

Throughout the documentation, two terms, that you need to know about and their meaning in the context of the validation plugin, are used very often:

* '''method''': A validation method implements the logic to validate an element, like an email method that checks for the right format of an text input's value. A set of standard methods is available, and it is easy to write your own.
* '''rule''': A validation rule associates an element with a validation method, like  &quot;validate input with name &quot;primary-mail&quot; with methods &quot;required&quot; and &quot;email&quot;.

For a start, the validate-method:

=== Plugin methods ===

{{APIList|
{{APIListHeader|Plugin methods}}
{{:Plugins/Validation/validate}}
{{:Plugins/Validation/valid}}
{{:Plugins/Validation/rules}}
{{:Plugins/Validation/removeAttrs}}
}}

=== Custom selectors ===

{{APIList|
{{APIListHeader|Custom selectors}}
{{:Plugins/Validation/blank}}
{{:Plugins/Validation/filled}}
{{:Plugins/Validation/unchecked}}
}}

=== Utilities ===

{{APIList|
{{APIListHeader|String utilities}}
{{:Plugins/Validation/jQuery.validator.format}}
}}

=== Validator ===

The validate method returns a Validator object that has a few public methods that you can use trigger validation programmatically or change the contents of the form. The validator object has more methods, but only those documented here are intended for usage.

{{APIList|
{{APIListHeader|Validator methods}}
{{:Plugins/Validation/Validator/form}}
{{:Plugins/Validation/Validator/element}}
{{:Plugins/Validation/Validator/resetForm}}
{{:Plugins/Validation/Validator/showErrors}}
{{:Plugins/Validation/Validator/numberOfInvalids}}
}}

There are a few static methods on the validator object:

{{APIList|
{{APIListHeader|Validator functions}}
{{:Plugins/Validation/Validator/setDefaults}}
{{:Plugins/Validation/Validator/addMethod}}
{{:Plugins/Validation/Validator/addClassRules}}
}}

=== List of built-in Validation methods ===

A set of standard validation methods is provided:

{{APIList|
{{APIListHeader|Methods}}
{{:Plugins/Validation/Methods/required}}
{{:Plugins/Validation/Methods/remote}}
{{:Plugins/Validation/Methods/minlength}}
{{:Plugins/Validation/Methods/maxlength}}
{{:Plugins/Validation/Methods/rangelength}}
{{:Plugins/Validation/Methods/min}}
{{:Plugins/Validation/Methods/max}}
{{:Plugins/Validation/Methods/range}}
{{:Plugins/Validation/Methods/email}}
{{:Plugins/Validation/Methods/url}}
{{:Plugins/Validation/Methods/date}}
{{:Plugins/Validation/Methods/dateISO}}
{{:Plugins/Validation/Methods/number}}
{{:Plugins/Validation/Methods/digits}}
{{:Plugins/Validation/Methods/creditcard}}
{{:Plugins/Validation/Methods/equalTo}}
}}

Some more methods are provided as addons, currently included in additional-methods.js in the download package.

{{APIList|
{{:Plugins/Validation/Methods/accept}}
{{:Plugins/Validation/CustomMethods/extension}}
{{:Plugins/Validation/CustomMethods/minWords}}
{{:Plugins/Validation/CustomMethods/maxWords}}
{{:Plugins/Validation/CustomMethods/rangeWords}}
{{:Plugins/Validation/CustomMethods/letterswithbasicpunc}}
{{:Plugins/Validation/CustomMethods/alphanumeric}}
{{:Plugins/Validation/CustomMethods/lettersonly}}
{{:Plugins/Validation/CustomMethods/nowhitespace}}
{{:Plugins/Validation/CustomMethods/ziprange}}
{{:Plugins/Validation/CustomMethods/vinUS}}
{{:Plugins/Validation/CustomMethods/dateITA}}
{{:Plugins/Validation/CustomMethods/phoneUS}}
}}

== [[Plugins/Validation/Reference|General Guidelines]] ==

The General Guidelines section provides detailed discussion of the design and ideas behind the plugin, explaining why certains things are as they are. It covers features in more detail then the API documentation, which just briefly explains the various methods and options available.

If you decided to use the validation plugin in your application and want to get it to know better, it is recommended to read those guidelines.

=== Fields with complex names (brackets, dots) ===

One of the most common issues, see the [[Plugins/Validation/Reference#Fields_with_complex_names_.28brackets.2C_dots.29|reference for details]].

=== Too much recursion ===

Another common problem occurs with this code:

 $(&quot;#myform&quot;).validate({
  submitHandler: function(form) {
    // some other code
    // maybe disabling submit button
    // then:
    $(form).submit();
  }
 });

This results in a too-much-recursion error: $(form).submit() triggers another round of validation, resulting in
another call to submitHandler, and voila, recursion. Replace that with
form.submit(), which triggers the native submit event instead and not
the validation.

So the correct code looks slightly different:

 $(&quot;#myform&quot;).validate({
  submitHandler: function(form) {
    form.submit();
  }
 });

== Demos ==

=== [http://jquery.bassistance.de/validate/demo/marketo/ The Marketo sign-up form] ===
==== [http://jquery.bassistance.de/validate/demo/marketo/step2.htm The Marketo sign-up form, step 2] ====
Based on the marketo.com sign-up form. The custom validation was replaced with this plugin. Thanks to Glen Lipka for contributing it!

''Notable features of the demo:''
* Customized message display: No messages displayed for the required method, only for type-errors (like wrong email format); A summary is displayed at the top (&quot;You missed 12 fields. They have been highlighted below.&quot;)
* Remote validation of email field. Try to enter eg. glen@marketo.com
* Integration with masked-input plugin, see Zip and Phone fields and Credit Card Number on step 2
* A custom method for making the billing address on step 2 optional when &quot;Same as Company Address&quot; is checked
* A custom method for checking the password: Checks that the password contains at least one number and one character and that it is at least 6 characters long. If the user blurs the field with an invalid value, the input emptied and gets focus again.

=== [http://jquery.bassistance.de/validate/demo/milk/ The Remember The Milk sign-up form] ===
The sign-up form from rememberthemilk.com (based on an older version). The custom validation was replaced using this plugin. Thanks to RTM for contributing!

''Notable features of the demo:''
* Custom message display, based on the original table layout, using success option to display a checkmark for valid fields
* Remote validation of username, to check if it is already taken (try &quot;Peter&quot;, &quot;asdf&quot; or &quot;George&quot;)

=== [http://jquery.bassistance.de/validate/demo/multipart/ A multipart &quot;buy&amp;sell a house&quot; form] ===
Contributed by Michael Evangelista, showing a multipart form for buying and selling houses.

''Notable features of the demo:''
* Multipart, implemented using the jQuery UI accordion and a custom method to check if an element is on the current page when validated
* Integration with masked-input plugin, see Phone and Zip fields

=== [http://jquery.bassistance.de/validate/demo/captcha/ Using remote validation to help with captchas] ===
Features remote validation for helping the user to fill out captchas, based on example at [http://psyrens.com/captcha/ psyrens.com].

''Notable features of the demo:''
* Remote validation to check if the user entered the correct captcha, without forcing him to submit the form first</text>
      <sha1>33u32gu7b5vae41ivx0x2nl11w3x3oi</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Reference</title>
    <ns>0</ns>
    <id>2707</id>
    <revision>
      <id>14697</id>
      <parentid>14696</parentid>
      <timestamp>2009-03-24T17:13:18Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <comment>/* Markup recommendations */</comment>
      <text xml:space="preserve" bytes="8985">[[Plugins/Validation|« Back to Plugins/Validation]]

== Goals ==
The ultimate goal of this plugin is to make working with forms more fun for anyone. By improving the interaction, it is easier and less annoying for the user to fill out the form and submit it.

To achieve that goal, it is important that the plugin is actually deployed on websites around the world, so a lot of focus is spent on making it easy for a developer, you, to use the plugin.

The plugin can never replace serverside validation and doesn't intend to do so. Having both in place gives you the necessary security for your application, and the improved usability.

== Markup recommendations ==
Each input has a label associated with it: The for-attribute of the label refers to the id-attribute of the input.
&lt;pre&gt;&lt;nowiki&gt;
  &lt;label for=&quot;firstname&quot;&gt;Firstname&lt;/label&gt;&lt;input id=&quot;firstname&quot; name=&quot;fname&quot; /&gt;
&lt;/nowiki&gt;&lt;/pre&gt;

The name attribute is '''required''' for input elements, the validation plugin doesn't work without it. Usually name and id attributes should have the same value.

== Methods ==
A validation method implements the logic to validate any element. Provided are a set of default validation methods, like required. Except required itself and equalTo, all validation methods declare an element valid when it has no value at all. That way an email field is optional, unless also required is specified. you can specify an element input to contain a valid email address, or nothing at all. Use [[Plugins/Validation/Validator/addMethod|$.validator.addMethod]] to implement custom methods.

=== Validating multiple fields with one method ===
Using a combination of custom methods, the groups-option and, when necessary, custom error placement, you can validate multiple fields with one method and display a single message for them. [[Plugins/Validation/multiplefields|The example shows how to validate a date range.]]

== Rules ==
A validation rule applies one or more validation methods to an input element. You can specify validation rules via metadata or via plugin settings (option rules). The decision is often influenced by serverside infrastructure. If a web framework is used, its often easier to use metadata, which is also good for fast prototyping. Plugin settings produce cleaner markup, though valid markup results from both.

=== Fields with complex names (brackets, dots) ===
If your form consists of fields using names that aren't legal JavaScript identifiers, you have to quote those names when using the rules option:

 $(&quot;#myform&quot;).validate({
   rules: {
     // no quoting necessary
     name: &quot;required&quot;,
     // quoting necessary!
     &quot;user[email]&quot;: &quot;email&quot;,
     // dots need quoting, too!
     &quot;user.address.street&quot;: &quot;required&quot;
   }
 });

=== Refactoring rules ===
Whenever you have multiple fields with the same rules and messages, refactoring those can reduce a lot of duplication. Using addMethod and addClassRules are most effective for that.

Lets consider an example where you have ten customer fields, each is required and has a minlength of 2. You need custom messages for both rules. To avoid having to specify those rules and messages again and again, we can alias existing methods with different messages and group them into a single class:

 // alias required to cRequired with new message
 $.validator.addMethod(&quot;cRequired&quot;, $.validator.methods.required,
   &quot;Customer name required&quot;);
 // alias minlength, too
 $.validator.addMethod(&quot;cMinlength&quot;, $.validator.methods.minlength,
   // leverage parameter replacement for minlength, {0} gets replaced with 2
   $.format(&quot;Customer name must have at least {0} characters&quot;));
 // combine them both, including the parameter for minlength
 $.validator.addClassRules(&quot;customer&quot;, { cRequired: true, cMinlength: 2 });

With that in place, we can add a class customer to all customer fields and be done with it:

 &lt;input name=&quot;customer1&quot; class=&quot;customer&quot; /&gt;
 &lt;input name=&quot;customer2&quot; class=&quot;customer&quot; /&gt;
 &lt;input name=&quot;customer3&quot; class=&quot;customer&quot; /&gt;

== Error messages ==
An error message displays a hint for the user about invalid elements, and what is wrong. There are three ways to provide error messages. Via the title attribute of the input element to validate, via error labels and via plugin settings (option messages).

All included validation rules provide a default error message which you can use for prototyping, because it is used when no specific message is provided.

The priorities are as follows: A custom message (passed by plugin options),  the element's title, the default message.

=== Error messages and Google Toolbar conflicts ===

Google Toolbar's AutoFill feature sometimes conflicts with the validation plugin's message display. Google Toolbar replaces the title attribute of an element with some hint at it's AutoFill. The validation plugin then uses that title attribute to display it as an error message - not the intended behaviour. One workaround to avoid that is to clear affected elements on DOM load:

  $(&quot;input.remove_title&quot;).attr(&quot;title&quot;, &quot;&quot;);

More details in [http://www.dream-revolver.com/2008/04/22/google-toolbar-overwriting-labels-when-using-jquerys-validate-plugin/ this article].

== Error message display ==
Error messages are handled via label elements with an additional class (option errorClass). The link between the message and the invalid element is provided via the label's for attribute. When provided in the markup, they are shown and hidden accordingly, otherwise created on demand. By default, labels are created after the invalid element, this is also customizable (option errorPlacement). It is also possible to put them into an error container (option errorLabelContainer). To use a different element then a label, specify the errorElement option.

== General messages ==
In addition to field-specific messages you can display a general &quot;your form is invalid, please fix the highlighted fields!&quot; message in a container anywhere on your page, eg. above the form (option errorContainer). The container is shown and hidden when errors occur and are fixed accordingly. The container for error labels (option errorLabelContainer) can also be nested inside the error container.

== Focusing of invalid elements ==
By default, the first invalid element in a form is focused after submitting a form with invalid elements. To prevent confusion on the behalf of the user, the plugin remembers the element that had focus when the form was submitted, and refocuses that element. That way the user can try to fill out elements of the form at the end, without being forced to focus them again and again. This can be disabled (option focusInvalid).

== Form submit ==
By default, the form submission is prevented when the form is invalid, and submitted as normal when it is valid. You can also handle the submission manually (option submitHandler).

=== Skipping validation on submit ===
To skip validation while still using a submit-button, add a class=&quot;cancel&quot; to that input.

 &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
 &lt;input type=&quot;submit&quot; class=&quot;cancel&quot; name=&quot;cancel&quot; value=&quot;Cancel&quot; /&gt;

[http://jquery.bassistance.de/validate/demo/errorcontainer-demo.html Demo for the cancel button]

== Validation event ==
By default, forms are validated on submit, triggered by the user clicking the submit button or pressing enter when a form input is focused (option onsubmit). In addition, once a field was highlighted as being invalid, it is validated whenever the user types something in the field (option onkeyup). When the user enters something invalid into a valid field, it is also validated when the field loses focus (option onblur).

The goal of these interactions is to provide feedback as early as possible, while avoid to annoy users. Displaying error messages before the user had the chance to even type something is not helpful.

== Developing and debugging a form ==
While developing and debugging the form, you should set the debug option to true. That prevents the form submission on both valid and invalid forms and outputs some helpful messages to window.console (available via Firebug or Firebug Lite) that help debugging. When you have everything setup and don't get any error messages displayed, check if your rules all accept empty elements as valid (like email or url methods).

Some issues are caused by certain form element's names. A name you should avoid is &quot;submit&quot; (for submit buttons and anything else). Browsers expose form elements as properties of the form element, by their name, in this case hiding native methods like submit(). Just don't use name=&quot;submit&quot; and you're good.

== Validating multiple forms on one page ==
The plugin can handle only one form per call. In case you have multiple forms on a single page which you want to validate, you can avoid having to duplicate the plugin settings by modifying the defaults. Use [[Plugins/Validation/Validator/setDefaults|$.validator.setDefaults({...})]] to override multiple settings at once.</text>
      <sha1>n5oroow5tnmkk1pou5dyk9rb4cupqih</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Validator/resetForm</title>
    <ns>0</ns>
    <id>2296</id>
    <revision>
      <id>6278</id>
      <parentid>6275</parentid>
      <timestamp>2007-10-14T19:06:41Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="701">{{APIHeader|Plugins/Validation/Validator|resetForm|function}}
{{APIEntry|
|type=function
|name=resetForm
|cat=Plugins/Validation/Validator
|return=undefined
|desc=Resets the controlled form.
|longdesc=Resets input fields to their original value (requires form plugin), removes classes indicating invalid elements and hides error messages.
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Reset the form controlled by this validator.
|code=&lt;nowiki&gt;var validator = &lt;/nowiki&gt;{{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}();&lt;nowiki&gt;
validator.&lt;/nowiki&gt;{{Code|Plugins/Validation/Validator|resetForm}}();
}}

}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation/Validator|resetForm|function}}</text>
      <sha1>5ywch6c5hune3qpds0ckz5jm84j65be</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Validator/element</title>
    <ns>0</ns>
    <id>2294</id>
    <revision>
      <id>6273</id>
      <parentid>6272</parentid>
      <timestamp>2007-10-14T18:56:00Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="723">{{APIHeader|Plugins/Validation/Validator|element|function}}
{{APIEntry|
|type=function
|name=element
|cat=Plugins/Validation/Validator
|return=Boolean
|desc=Validates a single element, returns true if it is valid, false otherwise.
|longdesc=This behaves as validation on blur or keyup, but returns the result.
|arg0=element
|arg0type=Selector
|arg0desc=An element to validate, must be inside the validated form.
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Triggers element validation programmatically.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}().{{Code|Plugins/Validation/Validator|element}}( &quot;#myselect&quot; );
}}

}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation/Validator|element|function}}</text>
      <sha1>ozgjav6582c010uwkty1k5xn89fqe4t</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Validator/refresh</title>
    <ns>0</ns>
    <id>2295</id>
    <revision>
      <id>7584</id>
      <parentid>6277</parentid>
      <timestamp>2008-01-16T21:59:09Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1166">{{APIHeader|Plugins/Validation/Validator|refresh|function}}
{{APIEntry|
|type=function
|name=refresh
|cat=Plugins/Validation/Validator
|return=undefined
|desc=DEPRECATED in 1.2. Gone. No need for a replacement.

Call to refresh a form after new elements have been added or rules changed.
|longdesc=Accepts an optional argument to refresh only a part of the form, eg. only the newly added element.
|arg0=selection
|arg0type=Selector
|arg0desc=Refresh only the given elements, instead of the entire form
|arg0optional=true
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Refrehes the validator after the form has changed.
|code=&lt;nowiki&gt;var validator = &lt;/nowiki&gt;{{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}();&lt;nowiki&gt;
validator.&lt;/nowiki&gt;{{Code|Plugins/Validation/Validator|refresh}}();
}}

{{APIExample|
|desc=Refreshes the validator after a new element has been added.
|code=&lt;nowiki&gt;var validator = &lt;/nowiki&gt;{{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}();&lt;nowiki&gt;
validator.&lt;/nowiki&gt;{{Code|Plugins/Validation/Validator|refresh}}( &quot;#newElement&quot; );
}}

}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation/Validator|refresh|function}}</text>
      <sha1>87ik8hx2tydyhtaf3143o36tsjfiykw</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/numberDE</title>
    <ns>0</ns>
    <id>2449</id>
    <revision>
      <id>7480</id>
      <timestamp>2008-01-09T05:37:00Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1929">{{APIHeader|Plugins/Validation/Methods|numberDE|function}}
{{APIEntry|
|type=function
|name=numberDE
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a decimal number with german format.
|longdesc=Returns true if the value contains a valid decimal number with german format.

Works with text inputs.
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://dev.jquery.com/view/trunk/plugins/validate/lib/jquery.delegate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://dev.jquery.com/view/trunk/plugins/validate/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, decimal number german format: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and a decimal number with german format only.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      numberDE: true
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|numberDE|function}}</text>
      <sha1>o29qhz65sfbww6xyxly5q5e9rwxbqom</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/CustomMethods/phoneUS</title>
    <ns>0</ns>
    <id>2798</id>
    <revision>
      <id>11082</id>
      <timestamp>2008-10-26T12:17:06Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="2124">{{APIHeader|Plugins/Validation/CustomMethods|phoneUS|function}}
{{APIEntry|
|type=function
|name=phoneUS
|cat=Plugins/Validation/CustomMethods
|return=Boolean
|desc=Validate for valid US phone number.
|longdesc=Works with text inputs.
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://dev.jquery.com/view/trunk/plugins/validate/lib/jquery.delegate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://dev.jquery.com/view/trunk/plugins/validate/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, us phone number: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and digits only.
|code=&lt;nowiki&gt;jQuery.validator.addMethod(&quot;phoneUS&quot;, function(phone_number, element) {
    phone_number = phone_number.replace(/\s+/g, &quot;&quot;);
	return this.optional(element) || phone_number.length &gt; 9 &amp;&amp;
		phone_number.match(/^(1-?)?(\([2-9]\d{2}\)|[2-9]\d{2})-?[2-9]\d{2}-?\d{4}$/);
}, &quot;Please specify a valid phone number&quot;);&lt;/nowiki&gt;

 {{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      phoneUS: true
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/CustomMethods|phoneUS|function}}</text>
      <sha1>fspo8x0yxtw0b4egbfb16p1ywc860kn</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Validator/form</title>
    <ns>0</ns>
    <id>2292</id>
    <revision>
      <id>6271</id>
      <parentid>6267</parentid>
      <timestamp>2007-10-14T18:53:38Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="578">{{APIHeader|Plugins/Validation/Validator|form|function}}
{{APIEntry|
|type=function
|name=form
|cat=Plugins/Validation/Validator
|return=Boolean
|desc=Validates the form, returns true if it is valid, false otherwise.
|longdesc=This behaves as a normal submit event, but returns the result.
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Triggers form validation programmatically.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}().{{Code|Plugins/Validation/Validator|form}}()
}}

}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation/Validator|form|function}}</text>
      <sha1>43q1tequf1gjp68me52ebk9do7vaac1</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/chars</title>
    <ns>0</ns>
    <id>3297</id>
    <revision>
      <id>15280</id>
      <parentid>15279</parentid>
      <timestamp>2009-05-07T07:48:38Z</timestamp>
      <contributor>
        <username>Sajid</username>
        <id>12742</id>
      </contributor>
      <minor/>
      <text xml:space="preserve" bytes="1805">{{APIHeader|Plugins/Validation/Methods|chars|function}}
{{APIEntry|
|type=function
|name=chars
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require Characters.
|longdesc=Returns true if the value contains only Characters.

Works with text inputs.
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://dev.jquery.com/view/trunk/plugins/validate/lib/jquery.delegate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.hybriditservices.com/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, Characters: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and Characters only.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      chars: true
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|chars|function}}</text>
      <sha1>1njyfcuuinuxmu6ovj0f0i7c2nrchpq</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/remote</title>
    <ns>0</ns>
    <id>2465</id>
    <revision>
      <id>15743</id>
      <parentid>11449</parentid>
      <timestamp>2009-06-15T15:43:06Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="2093">{{APIHeader|Plugins/Validation/Methods|remote|function}}
{{APIEntry|
|type=function
|name=remote
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Requests a resource to check the element for validity.
|longdesc=The serverside resource is called via $.ajax (XMLHttpRequest) and gets a key/value pair, corresponding to the name of the validated element and its value as a GET parameter. The response is evaluated as JSON and must be ''true'' for valid elements, and can be any ''false'', ''undefined'' or ''null'' for invalid elements, using the default message; or a string, eg. ''&quot;That name is already taken, try peter123 instead&quot;'' to display as the error message.

For more examples, take a look the [[Plugins/Validation#The_Marketo_sign-up_form|marketo demo]] and the [[Plugins/Validation#The_Remember_The_Milk_sign-up_form|milk demo]].
|arg0=options
|arg0type=String, Options
|arg0desc=The URL of the resource to request for serverside validation (String) or options to fully customize the request, see {{Code|Ajax|jQuery.ajax}} for details.
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Makes the email field required, an email and does a remote request to check if the given address is already taken.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    email: {
      required: true,
      email: true,
      remote: &quot;check-email.php&quot;
    }
  }
});&lt;/nowiki&gt;
}}

{{APIExample|
|desc=Makes the email field required, an email and does a remote request to check if the given address is already taken. In addition, the http method is set to &quot;post&quot; and the username is sent along side the email address.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    email: {
      required: true,
      email: true,
      remote: {
        url: &quot;check-email.php&quot;,
        type: &quot;post&quot;,
        data: {
          username: function() {
            return $(&quot;#username&quot;).val();
          }
        }
      }
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|remote|function}}</text>
      <sha1>o1f8gdvsuv4hiezlk312g7s78n9qu63</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/accept</title>
    <ns>0</ns>
    <id>2398</id>
    <revision>
      <id>21284</id>
      <parentid>15744</parentid>
      <timestamp>2013-01-22T22:01:44Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="2453">{{APIHeader|Plugins/Validation/Methods|accept|function}}
{{APIEntry|
|type=function
|name=accept
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes a file upload accept only specified mime-types.
|longdesc=|longdesc=Uses the HTML5 file API to look at the type attribute of one or more selected files and validate that each matches the specified mime-type.

If nothing is specified, only images are allowed (image/*).

You can specify multiple mime-types by separating them with a comma, e.g. &quot;image/x-eps,application/pdf&quot;.

Works with type=&quot;file&quot; inputs.

Note: This method used to look at just the filename, specifically the file extension. That behaviour is now available as the &quot;extension&quot; method inside additional-methods.js, same as this &quot;accept&quot; method itself.
|arg0=mimetype
|arg0type=String
|arg0desc=The allowed type, seperated via &lt;nowiki&gt;&quot;,&quot;, defaults to &quot;image/*&quot;&lt;/nowiki&gt;
|arg0optional=true
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script src=&quot;https://raw.github.com/jzaefferer/jquery-validation/master/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://raw.github.com/jzaefferer/jquery-validation/master/additional-methods.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, only audio files allowed:&lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; type=&quot;file&quot;&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot;&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and ending accept only audio files.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      accept: &quot;audio/*&quot;
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|accept|function}}</text>
      <sha1>br52tpja8u2e18vgy6rard7f2s48ebn</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/dateDE</title>
    <ns>0</ns>
    <id>2408</id>
    <revision>
      <id>7477</id>
      <parentid>7239</parentid>
      <timestamp>2008-01-09T05:32:00Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1893">{{APIHeader|Plugins/Validation/Methods|dateDE|function}}
{{APIEntry|
|type=function
|name=dateDE
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a german date.
|longdesc=Return true, if the value is a valid date. Supports german dates (29.04.1994 or 1.1.2006). Doesn't make any sanity checks.

Works with text inputs.
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://dev.jquery.com/view/trunk/plugins/validate/lib/jquery.delegate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://dev.jquery.com/view/trunk/plugins/validate/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, date: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and a german date.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      dateDE: true
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|dateDE|function}}</text>
      <sha1>od0habmjcs7v705099zca6ra3lsvjad</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Validator/showErrors</title>
    <ns>0</ns>
    <id>2297</id>
    <revision>
      <id>16886</id>
      <parentid>6276</parentid>
      <timestamp>2009-09-23T11:59:05Z</timestamp>
      <contributor>
        <username>Paul.irish</username>
        <id>1479</id>
      </contributor>
      <comment>i18n error messages</comment>
      <text xml:space="preserve" bytes="1023">{{APIHeader|Plugins/Validation/Validator|showErrors|function}}
{{APIEntry|
|type=function
|name=showErrors
|cat=Plugins/Validation/Validator
|return=undefined
|desc=Show the specified messages.
|longdesc=Keys have to refer to the names of elements, values are displayed for those elements, using the configured error placement.


There is a repository of the error messages in many different languages. [http://dev.jquery.com/browser/trunk/plugins/validate/localization Browse it here]
|arg0=errors
|arg0type=Object&lt;String, String&gt;
|arg0desc=One or more key/value pairs of input names and messages.
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Adds and shows error message programmatically.
|code=&lt;nowiki&gt;var validator = &lt;/nowiki&gt;{{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}();&lt;nowiki&gt;
validator.&lt;/nowiki&gt;{{Code|Plugins/Validation/Validator|showErrors}}({&quot;firstname&quot;: &quot;I know that your firstname is Pete, Pete!&quot;});
}}

}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation/Validator|showErrors|function}}</text>
      <sha1>0wofssfvw29w7wwna10xm341pg11hsk</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/valid</title>
    <ns>0</ns>
    <id>2382</id>
    <revision>
      <id>20862</id>
      <parentid>19157</parentid>
      <timestamp>2011-12-09T11:15:32Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1055">{{APIHeader|Plugins/Validation|valid|function}}
{{APIEntry|
|type=function
|name=valid
|cat=Plugins/Validation
|return=Boolean
|desc=Checks whether the selected form is valid or whether all selected elements are valid.
|longdesc=[[Plugins/Validation/validate|validate()]] needs to be called on the form before checking it using this method.
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Sets up validation for a form, then checks if the form is when clicking a button valid.
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;name&quot; class=&quot;required&quot; /&gt;
  &lt;br/&gt;
  &lt;a href=&quot;#&quot; class=&quot;check&quot;&gt;Validate!&lt;/a&gt;
&lt;/form&gt;&lt;/nowiki&gt;
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}();
 $(&quot;a.check&quot;).click(function() {
   alert(&quot;Valid: &quot; + {{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|valid}}());
   return false;
 });
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation|valid|function}}</text>
      <sha1>ai571918jbbm5z9vjbhjpeqjmp2fnny</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/required</title>
    <ns>0</ns>
    <id>2390</id>
    <revision>
      <id>20867</id>
      <parentid>16998</parentid>
      <timestamp>2011-12-09T11:20:10Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="10841">{{APIHeader|Plugins/Validation/Methods|required|function}}
{{APIEntry|
|type=function
|name=required
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element always required.
|longdesc=Return false if the element is empty (text input) or unchecked (radio/checkbox) or nothing selected (select).

Works with text inputs, selects, checkboxes and radio buttons.

&lt;nowiki&gt;To force a user to select an option from a select box, provide an empty options like &lt;option value=&quot;&quot;&gt;Choose...&lt;/option&gt;&lt;/nowiki&gt;
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; always required. Nothing and blanks are invalid.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: &quot;required&quot;
  }
});&lt;/nowiki&gt;
}}

{{APIExample|
|height=70
|css=&lt;nowiki&gt;#fruit { margin-left: .5em; float: left; }
  	#fruit, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input, select { border: 1px solid black; margin-bottom: .5em;  }
	select.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;fruit&quot;&gt;Please select a fruit&lt;/label&gt;
  &lt;select id=&quot;fruit&quot; name=&quot;fruit&quot; title=&quot;Please select something!&quot;
    &lt;option value=&quot;&quot;&gt;&lt;/option&gt;
    &lt;option value=&quot;1&quot;&gt;Banana&lt;/option&gt;
    &lt;option value=&quot;2&quot;&gt;Apple&lt;/option&gt;
    &lt;option value=&quot;3&quot;&gt;Peach&lt;/option&gt;
  &lt;/select&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes the fruit select required.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    fruit: &quot;required&quot;
  }
});&lt;/nowiki&gt;
}}

{{APIExample|
|height=70
|css=&lt;nowiki&gt;label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	label.error {
		display:none;
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
    &lt;label for=&quot;gender_male&quot;&gt;
      &lt;input  type=&quot;radio&quot; id=&quot;gender_male&quot; value=&quot;m&quot; name=&quot;gender&quot; /&gt;
      Male
    &lt;/label&gt;
    &lt;label for=&quot;gender_female&quot;&gt;
      &lt;input  type=&quot;radio&quot; id=&quot;gender_female&quot; value=&quot;f&quot; name=&quot;gender&quot;/&gt;
      Female
    &lt;/label&gt;
    &lt;label for=&quot;gender&quot; class=&quot;error&quot;&gt;Please select your gender&lt;/label&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes the gender radio buttons required.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    gender: &quot;required&quot;
  }
});&lt;/nowiki&gt;
}}

{{APIExample|
|height=70
|css=&lt;nowiki&gt;#agree { margin-left: .5em; float: left; }
  	#agree, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;agree&quot;&gt;Please agree to our policy&lt;/label&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;agree&quot; title=&quot;Please agree to our policy!&quot; name=&quot;agree&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes the agree checkbox required.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    agree: &quot;required&quot;
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIEntry|
|type=function
|name=required
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element required, depending on the result of the given expression.
|longdesc=Return false if the element is empty (text input) or unchecked (radio/checkbox) or nothing selected (select).

Works with all kind of text inputs, selects, checkboxes and radio buttons.

Very often your expression will use selector filters such as &lt;code&gt;#foo:checked&lt;/code&gt;, &lt;code&gt;#foo:filled&lt;/code&gt;, &lt;code&gt;#foo:visible&lt;/code&gt;. &lt;small&gt;(See also [http://docs.jquery.com/Plugins/Validation/Methods#Custom_selectors Validate custom selectors])&lt;/small&gt;

&lt;nowiki&gt;To force a user to select an option from a select box, provide an empty options like &lt;option value=&quot;&quot;&gt;Choose...&lt;/option&gt;&lt;/nowiki&gt;
|arg0=dependency-expression
|arg0type=String
|arg0desc=An expression (String) is evaluated in the context of the element's form, making the field required only if the expression returns more than one element.
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|height=110
|css=&lt;nowiki&gt;label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	label.error {
		display:none;
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|desc=Makes details required only if #other is checked.
|html=&lt;nowiki&gt;&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;other&quot;&gt;&lt;input id=&quot;other&quot; type=&quot;checkbox&quot; /&gt;Check to make next field required&lt;/label&gt;
  &lt;br/&gt;
  &lt;input id=&quot;details&quot; name=&quot;details&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;&lt;/nowiki&gt;
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    details: {
      required: &quot;#other:checked&quot;
    }
  }, debug:true
});
&lt;/nowiki&gt;{{Code|Core|$}}&lt;nowiki&gt;(&quot;#other&quot;).&lt;/nowiki&gt;{{Code|Events|click}}&lt;nowiki&gt;(function() {
  &lt;/nowiki&gt;{{Code|Core|$}}&lt;nowiki&gt;(&quot;#details&quot;).&lt;/nowiki&gt;{{Code|Plugins/Validation|valid}}&lt;nowiki&gt;();
});
&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIEntry|
|type=function
|name=required
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element required, depending on the result of the given callback.
|longdesc=Return false if the element is empty (text input) or unchecked (radio/checkbxo) or nothing selected (select).

Works with all kind of text inputs, selects, checkboxes and radio buttons.

&lt;nowiki&gt;To force a user to select an option from a select box, provide an empty options like &lt;option value=&quot;&quot;&gt;Choose...&lt;/option&gt;&lt;/nowiki&gt;
|arg0=dependency-callback
|arg0type=Callback
|arg0desc=The function is executed with the element as it's only argument: If it returns true, the element is required.
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Makes &quot;parent&quot; required only if age is below 13.
|css=&lt;nowiki&gt;label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	label.error {
		display:none;
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|desc=Makes details required only if #other is checked.
|html=&lt;nowiki&gt;&lt;form id=&quot;myform&quot;&gt;
  &lt;label&gt;Age &lt;/label&gt;&lt;input id=&quot;age&quot; name=&quot;age&quot; /&gt;
  &lt;br/&gt;
  &lt;label&gt;Parent &lt;/label&gt;&lt;input id=&quot;parent&quot; name=&quot;parent&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;&lt;/nowiki&gt;
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    age: {
      required: true,
      min: 3
    },
    parent: {
      required: function(element) {
        return $(&quot;#age&quot;).val() &lt; 13;
      }
    }
  }
});
&lt;/nowiki&gt;{{Code|Core|$}}&lt;nowiki&gt;(&quot;#age&quot;).&lt;/nowiki&gt;{{Code|Events|blur}}&lt;nowiki&gt;(function() {
  &lt;/nowiki&gt;{{Code|Core|$}}&lt;nowiki&gt;(&quot;#parent&quot;).&lt;/nowiki&gt;{{Code|Plugins/Validation|valid}}&lt;nowiki&gt;();
});

&lt;/nowiki&gt;
}}
}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|required|function}}</text>
      <sha1>b5ikfsup22wuhsqdqwneaiy77rzwzod</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/minlength</title>
    <ns>0</ns>
    <id>2392</id>
    <revision>
      <id>20868</id>
      <parentid>10345</parentid>
      <timestamp>2011-12-09T11:20:36Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1974">{{APIHeader|Plugins/Validation/Methods|minlength|function}}
{{APIEntry|
|type=function
|name=minlength
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a given minimum length.
|longdesc=Return false, if the element is
* some kind of text input and its value is too short
* a set of checkboxes has not enough boxes checked
* a select and has not enough options selected

Works with text inputs, selects and checkboxes.
|arg0=length
|arg0type=Integer
|arg0desc=Minimum number of characters required
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, Minimum length 3: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required having at least 3 characters.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      minlength: 3
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|minlength|function}}</text>
      <sha1>t59zi9qgkvpihrpzp33vvjkdqg583j5</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/maxlength</title>
    <ns>0</ns>
    <id>2393</id>
    <revision>
      <id>20869</id>
      <parentid>7505</parentid>
      <timestamp>2011-12-09T11:21:35Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1970">{{APIHeader|Plugins/Validation/Methods|maxlength|function}}
{{APIEntry|
|type=function
|name=maxlength
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a given maxmimum length.
|longdesc=Return false, if the element is
* some kind of text input and its value is too long
* a set of checkboxes has too many boxes checked
* a select and has too many options selected

Works with text inputs, selects and checkboxes.
|arg0=length
|arg0type=Integer
|arg0desc=Maximum number of characters required
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, maximum length 4: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required having at most 4 characters.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      maxlength: 4
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|maxlength|function}}</text>
      <sha1>1c4rp3ddv6yfmbti38ie44ean9yyy2c</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/rangelength</title>
    <ns>0</ns>
    <id>2397</id>
    <revision>
      <id>20870</id>
      <parentid>7509</parentid>
      <timestamp>2011-12-09T11:21:57Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="2020">{{APIHeader|Plugins/Validation/Methods|rangelength|function}}
{{APIEntry|
|type=function
|name=rangelength
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a given value range.
|longdesc=|longdesc=Return false, if the element is
* some kind of text input and its length is too short or too long
* a set of checkboxes has not enough or too many boxes checked
* a select and has not enough or too many options selected

Works with text inputs.
|arg0=range
|arg0type=Array&lt;Integer&gt;
|arg0desc=Value range required
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, minium length 2, maximum length 6: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and between 2 and 6 characters long.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      rangelength: [2, 6]
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|rangelength|function}}</text>
      <sha1>4atx4i3gofwwabnmirv60d74orrpqer</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/min</title>
    <ns>0</ns>
    <id>2394</id>
    <revision>
      <id>20871</id>
      <parentid>18061</parentid>
      <timestamp>2011-12-09T11:22:16Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1768">{{APIHeader|Plugins/Validation/Methods|min|function}}
{{APIEntry|
|type=function
|name=min
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a given minimum.
|longdesc=Works with text inputs. To exclude the minimum value, add Number.MIN_VALUE to that value.
|arg0=value
|arg0type=Integer
|arg0desc=Minimum value required
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, minimum 13: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and 13 or larger.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      min: 13
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|min|function}}</text>
      <sha1>7meo2jllh6nvrbnuu3p7roxx751r5yz</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/max</title>
    <ns>0</ns>
    <id>2395</id>
    <revision>
      <id>20872</id>
      <parentid>18060</parentid>
      <timestamp>2011-12-09T11:22:38Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1782">{{APIHeader|Plugins/Validation/Methods|max|function}}
{{APIEntry|
|type=function
|name=max
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a given maximum.
|longdesc=Works with text inputs. To exclude the maximum value, subtract Number.MIN_VALUE from that value.
|arg0=value
|arg0type=Integer
|arg0desc=Maximum value required
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, maximum value 23: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and 23 or smaller.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      max: 23
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|max|function}}</text>
      <sha1>ffacohsj3lroj026k06s2mass2q8e9d</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/range</title>
    <ns>0</ns>
    <id>2396</id>
    <revision>
      <id>20873</id>
      <parentid>18062</parentid>
      <timestamp>2011-12-09T11:23:06Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1881">{{APIHeader|Plugins/Validation/Methods|range|function}}
{{APIEntry|
|type=function
|name=range
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a given value range.
|longdesc=Works with text inputs.

To exclude the maximum value, subtract Number.MIN_VALUE from that value. To exclude the minimum value, add Number.MIN_VALUE to that value.
|arg0=range
|arg0type=Array&lt;Integer&gt;
|arg0desc=Value range required
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, minium 13, maximum 23: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and between 13 and 23.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      range: [13, 23]
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|range|function}}</text>
      <sha1>cefs2bsa1cd3sb229ywz4qmk1sgvioh</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/email</title>
    <ns>0</ns>
    <id>2402</id>
    <revision>
      <id>20874</id>
      <parentid>7472</parentid>
      <timestamp>2011-12-09T11:23:19Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1697">{{APIHeader|Plugins/Validation/Methods|email|function}}
{{APIEntry|
|type=function
|name=email
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a valid email
|longdesc=Return true, if the value is a valid email address.

Works with text inputs.
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, email: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and an email address.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      email: true
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|email|function}}</text>
      <sha1>npzpjbf1buf4ufm92ze5gchs1aemd65</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/url</title>
    <ns>0</ns>
    <id>2401</id>
    <revision>
      <id>20875</id>
      <parentid>7473</parentid>
      <timestamp>2011-12-09T11:23:37Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1664">{{APIHeader|Plugins/Validation/Methods|url|function}}
{{APIEntry|
|type=function
|name=url
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a valid url
|longdesc=Return true, if the value is a valid url.

Works with text inputs.
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, URL: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and a url.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      url: true
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|url|function}}</text>
      <sha1>ilblhp5w06b02b1j07oe0a4k4by7cew</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/date</title>
    <ns>0</ns>
    <id>2407</id>
    <revision>
      <id>21289</id>
      <parentid>21288</parentid>
      <timestamp>2013-03-02T17:49:51Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="2072">{{APIHeader|Plugins/Validation/Methods|date|function}}
{{APIEntry|
|type=function
|name=date
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a date.
|longdesc=Return true, if the value is a valid date. Uses JavaScripts built-in Date to test if the date is valid, and does therefore no sanity checks. Only the format must be valid, not the actual date, eg 30/30/2008 is a valid date.


This method should not be used, since it relies on the &quot;new Date&quot; constructor, which behaves very differently across browsers and locales. Use &quot;dateISO&quot; instead or one of the locale specific methods (in localizations/ and additional-methods.js).
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, date: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and a date.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      date: true
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|date|function}}</text>
      <sha1>bj4trrad16phc24lujs94chgzxk4z6e</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/dateISO</title>
    <ns>0</ns>
    <id>2409</id>
    <revision>
      <id>20877</id>
      <parentid>7476</parentid>
      <timestamp>2011-12-09T11:24:26Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1723">{{APIHeader|Plugins/Validation/Methods|dateISO|function}}
{{APIEntry|
|type=function
|name=dateISO
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a ISO date.
|longdesc=Return true, if the value is a valid date, according to ISO date standard.

Works with text inputs.
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, dateISO: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and a ISO date.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      dateISO: true
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|dateISO|function}}</text>
      <sha1>3at0s5tll05ahzpgtgo9ndg5tz4o8op</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/number</title>
    <ns>0</ns>
    <id>2448</id>
    <revision>
      <id>20879</id>
      <parentid>16948</parentid>
      <timestamp>2011-12-09T11:25:21Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1755">{{APIHeader|Plugins/Validation/Methods|number|function}}
{{APIEntry|
|type=function
|name=number
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a decimal number.
|longdesc=Returns true if the value contains a valid decimal number.

Works with text inputs.
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
                color: red;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, decimal number: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and a decimal number only.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      number: true
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|number|function}}</text>
      <sha1>bv7ks24tddmfrlc3y1rt3xv8clsu7kw</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/digits</title>
    <ns>0</ns>
    <id>2406</id>
    <revision>
      <id>20880</id>
      <parentid>7478</parentid>
      <timestamp>2011-12-09T11:25:39Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1693">{{APIHeader|Plugins/Validation/Methods|digits|function}}
{{APIEntry|
|type=function
|name=digits
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require digits only.
|longdesc=Returns true if the value contains only digits.

Works with text inputs.
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, digits: &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and digits only.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      digits: true
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|digits|function}}</text>
      <sha1>84owv5nsosxw668n0bsp56shtqmfqj2</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/creditcard</title>
    <ns>0</ns>
    <id>2410</id>
    <revision>
      <id>20881</id>
      <parentid>13656</parentid>
      <timestamp>2011-12-09T11:25:58Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1965">{{APIHeader|Plugins/Validation/Methods|creditcard|function}}
{{APIEntry|
|type=function
|name=creditcard
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Makes the element require a creditcard number.
|longdesc=Return true, if the value is a valid creditcard number.

Works with text inputs.

Note: The algorithm used can't verify the validity of the number - it is just a integrity check. As with any other clientside validation, you have to implement the same or better validation on the serverside.
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, creditcard (try 446-667-651): &lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and a creditcard number.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      creditcard: true
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|creditcard|function}}</text>
      <sha1>90ho0l4739f5j6zvksfl7p30205xaum</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Methods/equalTo</title>
    <ns>0</ns>
    <id>2400</id>
    <revision>
      <id>20882</id>
      <parentid>7484</parentid>
      <timestamp>2011-12-09T11:26:30Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="2065">{{APIHeader|Plugins/Validation/Methods|equalTo|function}}
{{APIEntry|
|type=function
|name=equalTo
|cat=Plugins/Validation/Methods
|return=Boolean
|desc=Requires the element to be the same as another one
|longdesc=Returns true if the value has the same value as the element specified by the first parameter.

Works with text inputs.
|arg0=other
|arg0type=Selector
|arg0desc=The selector for the element to compare the current values
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|height=130
|css=&lt;nowiki&gt;
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
  	label {  width: 10em; }
	br { clear: both; }
	input { margin-left: .5em; float: left; border: 1px solid black; margin-bottom: .5em;  }
	input.submit { float: none; }
	input.error { border: 1px solid red; width: auto; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;password&quot;&gt;Password&lt;/label&gt;
  &lt;input id=&quot;password&quot; name=&quot;password&quot; /&gt;
  &lt;br/&gt;
  &lt;label for=&quot;password_again&quot;&gt;Again&lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;password_again&quot; name=&quot;password_again&quot; /&gt;
  &lt;br/&gt;
  &lt;input class=&quot;submit&quot; type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required to be the same as #other
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    password: &quot;required&quot;,
    password_again: {
      equalTo: &quot;#password&quot;
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Methods|equalTo|function}}</text>
      <sha1>p51z00vt57ma9i2olrcl9277zmmpfd7</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/validate</title>
    <ns>0</ns>
    <id>2287</id>
    <revision>
      <id>21290</id>
      <parentid>21285</parentid>
      <timestamp>2013-03-03T17:42:53Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="20831">{{APIHeader|Plugins/Validation|validate|function}}
{{APIEntry|
|type=function
|name=validate
|cat=Plugins/Validation
|return=[[Plugins/Validation#Validator|Validator]]
|desc=Validates the selected form.
|longdesc=This method sets up event handlers for submit, focus, keyup, blur and click to trigger validation of the entire form or individual elements. Each one can be disabled, see the onxxx options (onsubmit, onfocusout, onkeyup, onclick). focusInvalid focuses elements when submitting a invalid form.

Use the debug option to ease setting up validation rules, it always prevents the default submit, even when script errors occur.

Use submitHandler to implement your own form submit, eg. via Ajax. Use invalidHandler to react when an invalid form is submitted.

Use rules and messages to specify which elements to validate, and how. See [[Plugins/Validation/rules|rules()]] for more details about specifying validation rules.

Use errorClass, errorElement, wrapper, errorLabelContainer, errorContainer, showErrors, success, errorPlacement, highlight, unhighlight, and ignoreTitle to control how invalid elements and error messages are displayed.

|arg0=options
|arg0type=Options
|arg0desc=A set of key/value pairs that configure the validate. All options are optional.
|arg0optional=true
}}

&lt;noinclude&gt;
{{APIOptions|

{{APIOption|debug|Boolean|Enables debug mode. If true, the form is not submitted and certain errors are displayed on the console (requires [http://getfirebug.com Firebug or Firebug lite]). Try to enable when a form is just submitted instead of validation stopping the submit.|false}}
{{APIOptionExample|
|desc=Prevents the form from submitting and tries to help setting up the validation with warnings about missing methods and other debug messages.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    debug: true
 })
}}
{{APIOptionExample|
|desc=Sets the debug option as the default, handy when validating multiple forms on a single page.
|code={{Code|Core|$}}.validator.{{Code|Plugins/Validation/Validator|setDefaults}}({
    debug: true
 })
}}

{{APIOption|submitHandler|Callback|Callback for handling the actual submit when the form is valid. Gets the form as the only argument. Replaces the default submit. The right place to [http://www.malsup.com/jquery/form/#api submit a form via Ajax] after it validated.|default (native) form submit}}
{{APIOptionExample|
|desc=Submits the form via Ajax when valid.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    submitHandler: function(form) {
      {{Code|Core|$}}(form).ajaxSubmit();
    }
 })
}}
{{APIOptionExample|
|desc=Use submitHandler to process something and then using the default submit. Note that &quot;form&quot; refers to a DOM element, this way the validation isn't triggered again.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    submitHandler: function(form) {
        // do other stuff for a valid form
      form.submit();
    }
 })
}}

{{APIOption|invalidHandler|Callback|Callback for custom code when an invalid form is submitted. Called with a event object as the first argument, and the validator as the second.}}
{{APIOptionExample|
|desc=Displays a message above the form, indicating how many fields are invalid when the user tries to submit an invalid form.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({&lt;nowiki&gt;
    invalidHandler: function(event, validator) {
      // 'this' refers to the form
      var errors = validator.numberOfInvalids();
      if (errors) {
        var message = errors == 1
          ? 'You missed 1 field. It has been highlighted'
          : 'You missed ' + errors + ' fields. They have been highlighted';
        $(&quot;div.error span&quot;).html(message);
        $(&quot;div.error&quot;).show();
      } else {
        $(&quot;div.error&quot;).hide();
      }
    }
 })&lt;/nowiki&gt;
}}

{{APIOption|ignore|Selector|Elements to ignore when validating, simply filtering them out. jQuery's not-method is used, therefore everything that is accepted by not() can be passed as this option. Inputs of type submit and reset are always ignored, so are disabled elements.|&quot;:hidden&quot;}}
{{APIOptionExample|
|desc=Ignores all element with the class &quot;ignore&quot; when validating.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}({
    ignore: &quot;.ignore&quot;
 })
}}

{{APIOption|rules|Options|Key/value pairs defining custom rules. Key is the name of an element (or a group of checkboxes/radio buttons), value is an object consisting of rule/parameter pairs or a plain String. Can be combined with class/attribute/data rules. Each rule can be specified as having a depends-property to apply the rule only in certain conditions. See the second example below for details.|rules are read from markup (classes, attributes, data)}}
{{APIOptionExample|
|desc=Specifies a name element as required and an email element as required (using the shortcut for a single rule) and a valid email address (using another object literal).
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    rules: {
      // simple rule, converted to {required:true}
      name: &quot;required&quot;,
      // compound rule
      email: {
        required: true,
        email: true
      }
    }
 })
}}
{{APIOptionExample|
|desc=Specifies a contact element as required and as email address, the latter depending on a checkbox being checked for contacting via email.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    rules: {
      contact: {
        required: true,
        email: {
          depends: function(element) {
            return $(&quot;#contactform_email:checked&quot;)
          }
        }
      }
    }
 })
}}

{{APIOption|messages|Options|Key/value pairs defining custom messages. Key is the name of an element, value the message to display for that element. Instead of a plain message another map with specific messages for each rule can be used. Overrides the title attribute of an element or the default message for the method (in that order). Each message can be a String or a Callback. The callback is called in the scope of the validator and with the rule's parameters as the first and the element as the second arugment, it must return a String to display as the message.|the default message for the method used}}
{{APIOptionExample|
|desc=Specifies a name element as required and an email element as required and a valid email address. A single message is specified for the name element, and two messages for email.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    rules: {
      name: &quot;required&quot;,
      email: {
        required: true,
        email: true
      }
    },
    messages: {
      name: &quot;Please specify your name&quot;,
      email: {
        required: &quot;We need your email address to contact you&quot;,
        email: &quot;Your email address must be in the format of name@domain.com&quot;
      }
    }
 })
}}
{{APIOptionExample|
|desc=Validates the name-field as required and having at least two characters. Provides a callback message using jQuery.format to avoid having to specify the parameter in two places.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    rules: {
      name: {
        required: true,
        minlength: 2
      }
    },
    messages: {
      name: {
        required: &quot;We need your email address to contact you&quot;,
        minlength: jQuery.format(&quot;At least {0} characters required!&quot;)
      }
    }
 })
}}

{{APIOption|groups|Options|Specify grouping of error messages. A group consists of an arbitrary group name as the key and a space separated list of element names as the value. Use errorPlacement to control where the group message is placed.}}
{{APIOptionExample|
|desc=Use a table layout for the form, placing error messags in the next cell after the input.
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;&lt;/nowiki&gt;
|html=&lt;nowiki&gt;&lt;form id=&quot;myform&quot;&gt;
  &lt;label&gt;Your Name&lt;/label&gt;
  &lt;input name=&quot;fname&quot; class=&quot;required&quot; value=&quot;Pete&quot; /&gt;
  &lt;input name=&quot;lname&quot; id=&quot;lastname&quot; class=&quot;required&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;
&lt;/form&gt;&lt;/nowiki&gt;
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}({
   groups: {
     username: &quot;fname lname&quot;
   },
   &lt;nowiki&gt;errorPlacement: function(error, element) {
     if (element.attr(&quot;name&quot;) == &quot;fname&quot;
                 || element.attr(&quot;name&quot;) == &quot;lname&quot; )
       error.insertAfter(&quot;#lastname&quot;);
     else
       error.insertAfter(element);
   },
   debug:true
 })&lt;/nowiki&gt;
}}

{{APIOption|onsubmit|false, Function|Validate the form on submit. Set to false to use only other events for validation.}}
{{APIOptionExample|
|desc=Disables onsubmit validation, allowing the user to submit whatever he wants, while still validating on keyup/blur/click events (if not specified otherwise).
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    onsubmit: false
 })
}}

{{APIOption|onfocusout|false, Function|Validate elements (except checkboxes/radio buttons) on blur. If nothing is entered, all rules are skipped, except when the field was already marked as invalid.}}
{{APIOptionExample|
|desc=Disables onblur validation.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    onfocusout: false
 })
}}

{{APIOption|onkeyup|false, Function|Validate elements on keyup. As long as the field is not marked as invalid, nothing happens. Otherwise, all rules are checked on each key up event.}}
{{APIOptionExample|
|desc=Disables onkeyup validation.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    onkeyup: false
 })
}}

{{APIOption|onclick|false, Function|Validate checkboxes and radio buttons on click.}}
{{APIOptionExample|
|desc=Disables onclick validation of checkboxes and radio buttons.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    onclick: false
 })
}}

{{APIOption|focusInvalid|Boolean|Focus the last active or first invalid element on submit via validator.focusInvalid(). The last active element is the one that had focus when the form was submitted, avoiding to steal its focus. If there was no element focused, the first one in the form gets it, unless this option is turned off.|true}}
{{APIOptionExample|
|desc=Disables focusing of invalid elements.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    focusInvalid: false
 })
}}

{{APIOption|focusCleanup|Boolean|If enabled, removes the errorClass from the invalid elements and hides all errors messages whenever the element is focused. Avoid combination with focusInvalid.|false}}
{{APIOptionExample|
|desc=Enables cleanup when focusing elements, removing the error class and hiding error messages when an element is focused.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    focusCleanup: true
 })
}}

{{APIOption|errorClass|String|Use this class to create error labels, to look for existing error labels and to add it to invalid elements.|&quot;error&quot;}}
{{APIOptionExample|
|desc=Sets the error class to &quot;invalid&quot;.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    errorClass: &quot;invalid&quot;
 })
}}

{{APIOption|validClass|String|This class is added to an element after it was validated and considered valid.|&quot;valid&quot;}}
{{APIOptionExample|
|desc=Sets the valid class to &quot;success&quot;.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    validClass: &quot;success&quot;
 })
}}

{{APIOption|errorElement|String|Use this element type to create error messages and to look for existing error messages. The default, &quot;label&quot;, has the advantage of creating a meaningful link between error message and invalid field using the for attribute (which is always used, no matter the element type).|&quot;label&quot;}}
{{APIOptionExample|
|desc=Sets the error element to &quot;em&quot;.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    errorElement: &quot;em&quot;
 })
}}

{{APIOption|wrapper|String|Wrap error labels with the specified element. Useful in combination with errorLabelContainer to create a list of error messages.}}
{{APIOptionExample|
|desc=Wrap each error element with a list item, useful when using an ordered or unordered list as the error container.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    wrapper: &quot;li&quot;
 })
}}

{{APIOption|errorLabelContainer|Selector|Hide and show this container when validating.}}
{{APIOptionExample|
|desc=All error labels are displayed inside an unordered list with the ID &quot;messageBox&quot;, as specified by the selector passed as errorContainer option. All error elements are wrapped inside an li element, to create a list of messages.
|html=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;ul id=&quot;messageBox&quot;&gt;&lt;/ul&gt;
 &lt;form id=&quot;myform&quot; action=&quot;/login&quot; method=&quot;post&quot;&gt;
   &lt;label&gt;Firstname&lt;/label&gt;
   &lt;input name=&quot;fname&quot; class=&quot;required&quot; /&gt;
   &lt;label&gt;Lastname&lt;/label&gt;
   &lt;input name=&quot;lname&quot; title=&quot;Your lastname, please!&quot; class=&quot;required&quot; /&gt;
   &lt;br/&gt;
   &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;
 &lt;/form&gt;&lt;/nowiki&gt;
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}({
    errorLabelContainer: &quot;#messageBox&quot;,
    wrapper: &quot;li&quot;,
    submitHandler: function() { alert(&quot;Submitted!&quot;) }
 })
}}

{{APIOption|errorContainer|Selector|Hide and show this container when validating.}}
{{APIOptionExample|
|height=240
|desc=Uses an additonal container for error messages. The elements given as the errorContainer are all shown and hidden when errors occur. But the error labels themselve are added to the element(s) given as errorLabelContainer, here an unordered list. Therefore the error labels are also wrapped into li elements (wrapper option).
|css=&lt;nowiki&gt;#messageBox1, #messageBox2 { display: none }&lt;/nowiki&gt;
|html=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;div id=&quot;messageBox1&quot;&gt;
  &lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;form id=&quot;myform&quot; action=&quot;/login&quot; method=&quot;post&quot;&gt;
  &lt;label&gt;Firstname&lt;/label&gt;
  &lt;input name=&quot;fname&quot; class=&quot;required&quot; /&gt;
  &lt;label&gt;Lastname&lt;/label&gt;
  &lt;input name=&quot;lname&quot; title=&quot;Your lastname, please!&quot; class=&quot;required&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;
&lt;/form&gt;
&lt;div id=&quot;messageBox2&quot;&gt;
  &lt;h3&gt;There are errors in your form, see details above!&lt;/h3&gt;
&lt;/div&gt;&lt;/nowiki&gt;
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}({
    errorContainer: &quot;#messageBox1, #messageBox2&quot;,
    errorLabelContainer: &quot;#messageBox1 ul&quot;,
    wrapper: &quot;li&quot;, debug:true,
    submitHandler: function() { alert(&quot;Submitted!&quot;) }
 })
}}

{{APIOption|showErrors|Callback|A custom message display handler. Gets the map of errors as the first argument and and array of errors as the second, called in the context of the validator object. The arguments contain only those elements currently validated, which can be a single element when doing validation onblur/keyup. You can trigger (in addition to your own messages) the default behaviour by calling this.defaultShowErrors().|None, uses built-in message disply.}}
{{APIOptionExample|
|desc=Update the number of invalid elements each time an error is displayed. Delegates to the default implementation for the actual error display.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    &lt;nowiki&gt;showErrors: function(errorMap, errorList) {
    $(&quot;#summary&quot;).html(&quot;Your form contains &quot;
                                   + this.numberOfInvalids()
                                   + &quot; errors, see details below.&quot;);
    this.defaultShowErrors();
  }
 })&lt;/nowiki&gt;
}}

{{APIOption|errorPlacement|Callback|Customize placement of created error labels. First argument: The created error label as a jQuery object. Second argument: The invalid element as a jQuery object.|Places the error label [[Manipulation/insertAfter|after]] the invalid element}}
{{APIOptionExample|
|desc=Use a table layout for the form, placing error messags in the next cell after the input.
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;&lt;/nowiki&gt;
|html=&lt;nowiki&gt;&lt;form id=&quot;myform&quot; action=&quot;/login&quot; method=&quot;post&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;label&gt;Firstname&lt;/label&gt;
      &lt;td&gt;&lt;input name=&quot;fname&quot; class=&quot;required&quot; value=&quot;Pete&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;label&gt;Lastname&lt;/label&gt;&lt;/td&gt;
      &lt;td&gt;&lt;input name=&quot;lname&quot; title=&quot;Your lastname, please!&quot; class=&quot;required&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;/&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/table&gt;
&lt;/form&gt;&lt;/nowiki&gt;
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}({
   &lt;nowiki&gt;errorPlacement: function(error, element) {
     error.appendTo( element.parent(&quot;td&quot;).next(&quot;td&quot;) );
   },
   debug:true
 })&lt;/nowiki&gt;
}}

{{APIOption|success|String, Callback|If specified, the error label is displayed to show a valid element. If a String is given, its added as a class to the label. If a Function is given, its called with the label (as a jQuery object) as its only argument. That can be used to add a text like &quot;ok!&quot;.}}
{{APIOptionExample|
|height=60
|desc=Add a class &quot;valid&quot; to valid elements, styled via CSS.
|css=&lt;nowiki&gt;label.valid {
  background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
  height:16px;
  width:16px;
  display: block;
  position: absolute;
  top: 4px;
  left: 152px;
}&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;email&quot; class=&quot;required&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
&lt;/form&gt;&lt;/nowiki&gt;
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}({
    success: &quot;valid&quot;,
    submitHandler: function() { alert(&quot;Submitted!&quot;) }
 })
}}
{{APIOptionExample|
|height=60
|desc=Add a class &quot;valid&quot; to valid elements, styled via CSS, and add the text &quot;Ok!&quot;.
|css=&lt;nowiki&gt;label.valid {
  background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
  height:16px;
  width:16px;
  display: block;
  position: absolute;
  top: 4px;
  left: 152px;
  padding-left: 18px;
}&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;input type=&quot;text&quot; name=&quot;email&quot; class=&quot;required&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
&lt;/form&gt;&lt;/nowiki&gt;
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}({
    success: function(label) {
      label.addClass(&quot;valid&quot;).text(&quot;Ok!&quot;)
    },
    submitHandler: function() { alert(&quot;Submitted!&quot;) }
 })
}}

{{APIOption|highlight|Callback|How to highlight invalid fields. Override to decide which fields and how to highlight.|Adds errorClass (see the option) to the element}}
{{APIOptionExample|
|desc=Highlights an invalid element by fading it out and in again.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
   &lt;nowiki&gt;highlight: function(element, errorClass) {
     $(element).fadeOut(function() {
       $(element).fadeIn();
     });
  }&lt;/nowiki&gt;
 })
}}
{{APIOptionExample|
|desc=Adds the error class to both the invalid element and it's label
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
   highlight: function(element, errorClass, validClass) {
      {{Code|Core|$}}(element).addClass(errorClass).removeClass(validClass);
      {{Code|Core|$}}&lt;nowiki&gt;(element.form).find(&quot;label[for=&quot; + element.id + &quot;]&quot;)
                    .addClass(errorClass);&lt;/nowiki&gt;
   },
   unhighlight: function(element, errorClass, validClass) {
      {{Code|Core|$}}(element).removeClass(errorClass).addClass(validClass);
      {{Code|Core|$}}&lt;nowiki&gt;(element.form).find(&quot;label[for=&quot; + element.id + &quot;]&quot;)
                    .removeClass(errorClass);&lt;/nowiki&gt;
   }
 });
}}

{{APIOption|unhighlight|Callback|Called to revert changes made by option highlight, same arguments as highlight.|Removes the errorClass}}

{{APIOption|ignoreTitle|Boolean|Set to skip reading messages from the title attribute, helps to avoid issues with Google Toolbar; default is false for compability, the message-from-title is likely to be completely removed in a future release|false}}
{{APIOptionExample|
|desc=Configure the plugin to ignore title attributes on validated elements when looking for messages.
|code={{Code|Core|$}}(&quot;.selector&quot;).{{Code|Plugins/Validation|validate}}({
    ignoreTitle: true
 })
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation|validate|function}}</text>
      <sha1>mceq0wffaisbt9yqyvh56uu60vy9pw5</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/CustomMethods/extension</title>
    <ns>0</ns>
    <id>3883</id>
    <revision>
      <id>21282</id>
      <timestamp>2013-01-22T21:53:18Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <comment>Created page with &quot;{{APIHeader|Plugins/Validation/CustomMethods|extension|function}} {{APIEntry| |type=function |name=extension |cat=Plugins/Validation/CustomMethods |return=Boolean |desc=Makes ...&quot;</comment>
      <text xml:space="preserve" bytes="2181">{{APIHeader|Plugins/Validation/CustomMethods|extension|function}}
{{APIEntry|
|type=function
|name=extension
|cat=Plugins/Validation/CustomMethods
|return=Boolean
|desc=Makes the element require a certain file extension.
|longdesc=|longdesc=Returns true if the value ends with one of the specified file extensions.
If nothing is specified, only images are allowed (png, jpeg, gif).

Works with text inputs.
|arg0=extension
|arg0type=String
|arg0desc=The allowed file extensions, seperated via &lt;nowiki&gt;&quot;|&quot; (or a comma, &quot;,&quot;), defaults to &quot;png|jpe?g|gif&quot;&lt;/nowiki&gt;
|arg0optional=true
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|height=70
|css=&lt;nowiki&gt;#field { margin-left: .5em; float: left; }
  	#field, label { float: left; font-family: Arial, Helvetica, sans-serif; font-size: small; }
	br { clear: both; }
	input { border: 1px solid black; margin-bottom: .5em;  }
	input.error { border: 1px solid red; }
	label.error {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/unchecked.gif') no-repeat;
		padding-left: 16px;
		margin-left: .3em;
	}
	label.valid {
		background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
		display: block;
		width: 16px;
		height: 16px;
	}
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://dev.jquery.com/view/trunk/plugins/validate/lib/jquery.delegate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://dev.jquery.com/view/trunk/plugins/validate/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
jQuery.validator.setDefaults({
	debug: true,
	success: &quot;valid&quot;
});;
&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;
&lt;form id=&quot;myform&quot;&gt;
  &lt;label for=&quot;field&quot;&gt;Required, only .xls and .csv files allowed&lt;/label&gt;
  &lt;input class=&quot;left&quot; id=&quot;field&quot; name=&quot;field&quot; /&gt;
  &lt;br/&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Validate!&quot; /&gt;
&lt;/form&gt;
&lt;/nowiki&gt;
|desc=Makes &quot;field&quot; required and ending with &quot;.xls&quot; or &quot;.csv&quot;.
|code={{Code|Core|$}}(&quot;#myform&quot;).{{Code|Plugins/Validation|validate}}&lt;nowiki&gt;({
  rules: {
    field: {
      required: true,
      extension: &quot;xls|csv&quot;
    }
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/CustomMethods|extension|function}}</text>
      <sha1>04dh3a49q683of842slkni3ynhenjxj</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/multiplefields</title>
    <ns>0</ns>
    <id>2602</id>
    <revision>
      <id>20884</id>
      <parentid>9306</parentid>
      <timestamp>2011-12-12T18:17:21Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1598">[[Plugins/Validation|« Back to Plugins/Validation]]

{{APIExample|
|height=110
|desc=How to validate a date range with custom message grouping and placement.
|code=&lt;nowiki&gt;// a custom method for validating the date range
$.validator.addMethod(&quot;dateRange&quot;, function() {
	return new Date($(&quot;#fromDate&quot;).val()) &lt; new Date($(&quot;#toDate&quot;).val());
}, &quot;Please specify a correct date range, the first must be before the second.&quot;);

// a new class rule to group all three methods
$.validator.addClassRules({
	requiredDateRange: {required:true, date:true, dateRange:true}
});

// overwrite default messages
$.extend($.validator.messages, {
	required: &quot;These fields are required&quot;,
	date: &quot;Please specify valid dates&quot;
});

var form = $(&quot;#dateRangeForm&quot;)
form.validate({
	submitHandler: function() {
		alert(&quot;Valid date range!&quot;)
 	},
	groups: {
		dateRange: &quot;fromDate toDate&quot;
	},
	errorPlacement: function(error) {
		form.find(&quot;.errorContainer&quot;).append(error);
	}
});

$(&quot;#validate&quot;).click(function() {
	form.valid();
	return false;
});
$(&quot;#fix&quot;).click(function() {
	$(&quot;#toDate&quot;).val(&quot;1995/02/06&quot;)
});&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;
&lt;/nowiki&gt;
|html=&lt;nowiki&gt;&lt;form id=&quot;dateRangeForm&quot;&gt;
	&lt;input id=&quot;fromDate&quot; name=&quot;fromDate&quot; class=&quot;requiredDateRange&quot; value=&quot;1995/01/06&quot; /&gt;
	&lt;input id=&quot;toDate&quot; name=&quot;toDate&quot; class=&quot;requiredDateRange&quot; value=&quot;1995/01/05&quot; /&gt;
	&lt;span class=&quot;errorContainer&quot;&gt;&lt;/span&gt;
	&lt;br/&gt;
	&lt;button id=&quot;validate&quot;&gt;Validate form&lt;/button&gt;
	&lt;button id=&quot;fix&quot;&gt;Fix second field&lt;/button&gt;
&lt;/form&gt;&lt;/nowiki&gt;
}}</text>
      <sha1>9qnh82x47lxpnlwnq7n9tfnpcijo95s</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Validator/addMethod</title>
    <ns>0</ns>
    <id>2299</id>
    <revision>
      <id>20699</id>
      <parentid>15746</parentid>
      <timestamp>2011-03-30T17:19:09Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="2439">{{APIHeader|Plugins/Validation/Validator|addMethod|function}}
{{APIEntry|
|type=function
|name=addMethod
|cat=Plugins/Validation/Validator
|return=undefined
|desc=Add a custom validation method. It must consist of a name (must be a legal javascript identifier), a javascript based function and a default string message.
|longdesc=The arguments to the callback are:
 * the current value of the validated element
 * the element to be validated
 * parameters specified for the method, e.g. for min: 5 the parameter is 5, for range: [1, 5] its [1, 5]

Please note: While the temptation is great to add a regex method that checks it's parameter against the value, it is much cleaner to encapsulate those regular expressions inside their own method. If you need lots of slightly different expressions, try to extract a common parameter.

A library of regular expressions: http://regexlib.com/DisplayPatterns.aspx
|arg0=name
|arg0type=String
|arg0desc=The name of the method, used to identify and referencing it, must be a valid javascript identifier
|arg1=method
|arg1type=Callback
|arg1desc=The actual method implementation, returning true if an element is valid. First argument: Current value. Second argument: Validated element. Third argument: Parameters.
|arg2=message
|arg2optional=true
|arg2type=String, Function
|arg2desc=The default message to display for this method. Can be a function created by ''jQuery.validator.format(value)''. When undefined, an already existing message is used (handy for localization), otherwise the field-specific messages have to be defined.
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Add a validation method that checks if a value starts with a certain domain.
|code=jQuery.validator.{{Code|Plugins/Validation/Validator|addMethod}}&lt;nowiki&gt;(&quot;domain&quot;, function(value, element) {
  return this.optional(element) || /^http:\/\/mycorporatedomain.com/.test(value);
}, &quot;Please specify the correct domain for your documents&quot;);&lt;/nowiki&gt;
}}

{{APIExample|
|desc=Adds a validation method that checks if a given value equals the addition of the two parameters.
|code=jQuery.validator.{{Code|Plugins/Validation/Validator|addMethod}}&lt;nowiki&gt;(&quot;math&quot;, function(value, element, params) {
 return this.optional(element) || value == params[0] + params[1];
}, jQuery.format(&quot;Please enter the correct value for {0} + {1}&quot;));&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation/Validator|addMethod|function}}</text>
      <sha1>juth5kog7u4oct9axfa42stm2pre503</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/removeAttrs</title>
    <ns>0</ns>
    <id>2573</id>
    <revision>
      <id>9057</id>
      <parentid>9056</parentid>
      <timestamp>2008-05-12T21:11:38Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="828">{{APIHeader|Plugins/Validation|removeAttrs|function}}
{{APIEntry|
|type=function
|name=removeAttrs
|cat=Plugins/Validation
|return=Options
|desc=Remove the specified attributes from the first matched element and return them.
|longdesc=
|arg0=attributes
|arg0type=String
|arg0desc=A space-seperated list of attribute names to remove.
}}
&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|desc=Usage of removeAttrs to remove rules, specified via attributes, from an element, submit its form - triggering the form validation - then add those rules back in case the form was invalid and gets a normal submit.
|code=&lt;nowiki&gt;
 $(&quot;#skip&quot;).click(function() {
   var rules = $(&quot;#myinput&quot;).removeAttrs(&quot;min max&quot;);
   $(&quot;#myform).submit();
   $(&quot;#myinput&quot;).attr(rules);
 });
&lt;/nowiki&gt;
}}
}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation|removeAttrs}}</text>
      <sha1>ndjlt7gjsectc7vvj17kysogtnig6xw</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/rules</title>
    <ns>0</ns>
    <id>2457</id>
    <revision>
      <id>14648</id>
      <parentid>11448</parentid>
      <timestamp>2009-03-22T20:28:10Z</timestamp>
      <contributor>
        <username>Logicalchaos</username>
        <id>11233</id>
      </contributor>
      <text xml:space="preserve" bytes="2538">{{APIHeader|Plugins/Validation|rules|function}}
{{APIEntry|
|type=function
|name=rules
|cat=Plugins/Validation
|return=Options
|desc=Return the validations rules for the first selected element.
|longdesc=There are several ways to specify validation rules.

* Validation methods without parameters can be specified as classes on the element (recommended)
* Validation methods with parameters can be specified as attributes (recommended)
* Both can be specified as metadata using the metadata plugin
* Both can be specified using the rules-option of the validate()-method
}}

{{APIEntry|
|type=function
|name=rules
|cat=Plugins/Validation
|return=Options
|desc=Adds the specified rules and returns all rules for the first matched element. Requires that the parent form is validated, that is, $(&quot;form&quot;).validate() is called first.
|longdesc=The rules can also contain a messages-object, specifying custom messages for existing or added rules.
|arg0=&quot;add&quot;
|arg0type=String
|arg0desc=
|arg1=rules
|arg1type=Options
|arg1desc=The rules to add. Accepts the same format as the rules-option of the validate-method.
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|desc=Adds minlength: 2 to an element which is already required.
|code={{Code|Core|$}}(&quot;#myinput&quot;).{{Code|Plugins/Validation|rules}}(&quot;add&quot;, {
  minlength: 2
 });
}}
{{APIExample|
|desc=Adds required and minlength: 2 to an element and specifies custom messages for both.
|code={{Code|Core|$}}(&quot;#myinput&quot;).{{Code|Plugins/Validation|rules}}(&quot;add&quot;, {
  required: true,
  minlength: 2,
  messages: {
    required: &quot;Required input&quot;,
    minlength: jQuery.format(&quot;Please, at least {0} characters are necessary&quot;)
  }
 });
}}
}}
&lt;/noinclude&gt;

{{APIEntry|
|type=function
|name=rules
|cat=Plugins/Validation
|return=Options
|desc=Removes the specified rules and returns all rules for the first matched element.
|longdesc=
|arg0=&quot;remove&quot;
|arg0type=String
|arg0desc=
|arg1=rules
|arg1type=Options
|arg1desc=The space-seperated names of rules to remove and return. If left unspecified, removes and return all rules. Manipulates only rules specified via rules-option or via rules(&quot;add&quot;).
|arg1optional=true
}}

&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|desc=Removes all static rules from an element.
|code={{Code|Core|$}}(&quot;#myinput&quot;).{{Code|Plugins/Validation|rules}}(&quot;remove&quot;);
}}

{{APIExample|
|desc=Removes min and max rules from an element.
|code={{Code|Core|$}}(&quot;#myinput&quot;).{{Code|Plugins/Validation|rules}}(&quot;remove&quot;, &quot;min max&quot;);
}}
}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation|rules|function}}</text>
      <sha1>9kjl1cxkq2l9lygruh8ya8jjobrwz91</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Validator/setDefaults</title>
    <ns>0</ns>
    <id>2298</id>
    <revision>
      <id>12813</id>
      <parentid>6284</parentid>
      <timestamp>2009-01-27T14:29:24Z</timestamp>
      <contributor>
        <username>Adamacus</username>
        <id>9392</id>
      </contributor>
      <minor/>
      <comment>missing end bracket in example</comment>
      <text xml:space="preserve" bytes="650">{{APIHeader|Plugins/Validation/Validator|setDefaults|function}}
{{APIEntry|
|type=function
|name=setDefaults
|cat=Plugins/Validation/Validator
|return=undefined
|desc=Modify default settings for validation.
|longdesc=Accepts everything that [[Plugins/Validation/validate]] accepts.
|arg0=defaults
|arg0type=Options
|arg0desc=Options to set as default.
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Sets the debug setting for all validation calls.
|code=jQuery.validator.{{Code|Plugins/Validation/Validator|setDefaults}}&lt;nowiki&gt;({
    debug: true
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation/Validator|setDefaults|function}}</text>
      <sha1>ewtzp6mtu88yavqkgbtue4xcsa7k1hl</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/blank</title>
    <ns>0</ns>
    <id>2403</id>
    <revision>
      <id>20863</id>
      <parentid>7226</parentid>
      <timestamp>2011-12-09T11:16:16Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="889">{{APIHeader|Plugins/Validation|blank|selector}}
{{APIEntry|
|type=selector
|name=blank
|sample=&lt;nowiki&gt;:blank&lt;/nowiki&gt;
|cat=Plugins/Validation
|return=Array&lt;Element&gt;
|desc=Matches elements with a blank value
|longdesc=Blank means either no value at all or only whitespace.

The implementation does a check like this: jQuery.trim(value).length == 0
}}
&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|desc=Finds input elements with no value or just whitespace.
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;&lt;/nowiki&gt;
|code=&lt;nowiki&gt;$(&quot;input:&lt;/nowiki&gt;{{Code|Plugins/Validation|blank}}&lt;nowiki&gt;&quot;).&lt;/nowiki&gt;{{Code|CSS|css}}&lt;nowiki&gt;(&quot;background-color&quot;, &quot;#bbbbff&quot;);&lt;/nowiki&gt;
|html=&lt;nowiki&gt;&lt;input value=&quot;&quot;/&gt;&lt;input value=&quot;   &quot;/&gt;&lt;input value=&quot;abc&quot;/&gt;&lt;/nowiki&gt;
}}
}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation|blank|selector}}</text>
      <sha1>bp8lilbopeiubls232fwxpoy8log03n</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/filled</title>
    <ns>0</ns>
    <id>2404</id>
    <revision>
      <id>20864</id>
      <parentid>15065</parentid>
      <timestamp>2011-12-09T11:16:31Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="967">{{APIHeader|Plugins/Validation|filled|selector}}
{{APIEntry|
|type=selector
|name=filled
|sample=&lt;nowiki&gt;:filled&lt;/nowiki&gt;
|cat=Plugins/Validation
|return=Array&lt;Element&gt;
|desc=Matches elements with a value.
|longdesc=filled means any value, but not only whitespace.

The implementation does a check like this: jQuery.trim(value).length &gt; 0
}}
&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|desc=Finds input elements with a non-whitespace value.
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;&lt;/nowiki&gt;
|code=&lt;nowiki&gt;$(&quot;input:&lt;/nowiki&gt;{{Code|Plugins/Validation|filled}}&lt;nowiki&gt;&quot;).&lt;/nowiki&gt;{{Code|CSS|css}}&lt;nowiki&gt;(&quot;background-color&quot;, &quot;#bbbbff&quot;);&lt;/nowiki&gt;
|html=&lt;nowiki&gt;&lt;div&gt;Mouseover to see the value of each input&lt;/div&gt;&lt;input value=&quot;&quot; title='&quot;&quot;'/&gt;&lt;input value=&quot;   &quot; title='&quot;   &quot;'/&gt;&lt;input value=&quot;abc&quot; title='&quot;abc&quot;'/&gt;&lt;/nowiki&gt;
}}
}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation|filled|selector}}</text>
      <sha1>l2wkqppqtwqghu0apxzy4qm1ojj7npu</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/unchecked</title>
    <ns>0</ns>
    <id>2405</id>
    <revision>
      <id>20865</id>
      <parentid>7228</parentid>
      <timestamp>2011-12-09T11:16:45Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1617">{{APIHeader|Plugins/Validation|unchecked|selector}}
{{APIEntry|
|type=selector
|name=unchecked
|sample=&lt;nowiki&gt;:unchecked&lt;/nowiki&gt;
|cat=Plugins/Validation
|return=Array&lt;Element&gt;
|added=1.0
|desc=Matches all elements that are unchecked.
|longdesc=Inversion of [[Selectors/checked|:checked]].
}}
&lt;noinclude&gt;
{{APIExamples|
{{APIExample|
|desc=Finds all input elements that are unchecked.
|inhead=&lt;nowiki&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;&lt;/nowiki&gt;
|code=&lt;nowiki&gt;
    function countUnchecked() {
      var n = $(&quot;input:&lt;/nowiki&gt;{{Code|Plugins/Validation|unchecked}}&lt;nowiki&gt;&quot;).&lt;/nowiki&gt;{{Code|Core|length}}&lt;nowiki&gt;;
      $(&quot;div&quot;).&lt;/nowiki&gt;{{Code|Attributes|text}}&lt;nowiki&gt;(n + (n == 1 ? &quot; is&quot; : &quot; are&quot;) + &quot; unchecked!&quot;);
    }
    countUnchecked();
    $(&quot;:checkbox&quot;).&lt;/nowiki&gt;{{Code|Events|click}}&lt;nowiki&gt;(countUnchecked);
&lt;/nowiki&gt;
|css=&lt;nowiki&gt;
  div { color:red; }
  &lt;/nowiki&gt;
|html=&lt;nowiki&gt;&lt;form&gt;
    &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; checked=&quot;checked&quot; value=&quot;Hourly&quot; /&gt;
    &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; value=&quot;Daily&quot; /&gt;
    &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; value=&quot;Weekly&quot; /&gt;
    &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; checked=&quot;checked&quot; value=&quot;Monthly&quot; /&gt;
    &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; value=&quot;Yearly&quot; /&gt;
  &lt;/form&gt;
  &lt;div&gt;&lt;/div&gt;&lt;/nowiki&gt;
|results=&lt;nowiki&gt;[ &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; checked=&quot;checked&quot; value=&quot;Daily&quot; /&gt;,
  &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; checked=&quot;checked&quot; value=&quot;Monthly&quot; /&gt; ]&lt;/nowiki&gt;
}}
}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation|unchecked|selector}}</text>
      <sha1>6u0vubxj70xn1shnbhl6rq2bl4xzdaz</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/jQuery.validator.format</title>
    <ns>0</ns>
    <id>2460</id>
    <revision>
      <id>20866</id>
      <parentid>15749</parentid>
      <timestamp>2011-12-09T11:17:25Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1860">{{APIHeader|Plugins/Validation|jQuery.validator.format|function}}
{{APIEntry|
|type=function
|name=jQuery.validator.format
|cat=Plugins/Validation
|return=String
|desc=Replaces {n} placeholders with arguments.
|longdesc=One or more arguments can be passed, in addition to the string template itself, to insert into the string.
|arg0=template
|arg0type=String
|arg0desc=The string to format.
|arg1=argument
|arg1type=String, Array&lt;String&gt;
|arg1desc=The first argument to insert, or an array of Strings to insert
|arg1optional=true
|arg2=argumentN...
|arg2type=String
|arg2desc=The second etc. argument to insert
|arg2optional=true
}}
&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Demonstrates basic usage.
|code=&lt;nowiki&gt;
    $(&quot;button&quot;).&lt;/nowiki&gt;{{Code|Events|click}}&lt;nowiki&gt;(function () {
      var str = &quot;Hello {0}, this is {1}&quot;;
      alert(&quot;'&quot; + str + &quot;'&quot;);

      str = &lt;/nowiki&gt;{{Code|Plugins/Validation|jQuery.validator.format}}&lt;nowiki&gt;(str, &quot;World&quot;, &quot;Bob&quot;);
      alert(&quot;'&quot; + str + &quot;'&quot;);
    });
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;&lt;/nowiki&gt;
|html=&lt;nowiki&gt;&lt;button&gt;Show format Example&lt;/button&gt;&lt;/nowiki&gt;
}}

{{APIExample|
|desc=Shows how to first create a template function by passing only the string argument and then calling it later.
|code=&lt;nowiki&gt;$(&quot;button&quot;).&lt;/nowiki&gt;{{Code|Events|click}}&lt;nowiki&gt;(function () {
  var template = &lt;/nowiki&gt;{{Code|Plugins/Validation|jQuery.validator.format}}&lt;nowiki&gt;(&quot;Please enter more {0}, or order {0} by mail (see {1})&quot;);
  alert(template(&quot;Apples&quot;, &quot;our FAQ&quot;));
});
&lt;/nowiki&gt;
|inhead=&lt;nowiki&gt;&lt;script src=&quot;http://jzaefferer.github.com/jquery-validation/jquery.validate.js&quot;&gt;&lt;/script&gt;&lt;/nowiki&gt;
|html=&lt;nowiki&gt;&lt;button&gt;Show format Example&lt;/button&gt;&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation|jQuery.validator.format|function}}</text>
      <sha1>hl537j1g97fpoyffbiyvfrrtvdrcy4z</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Validator/numberOfInvalids</title>
    <ns>0</ns>
    <id>3021</id>
    <revision>
      <id>13451</id>
      <timestamp>2009-02-10T15:06:50Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="875">{{APIHeader|Plugins/Validation/Validator|numberOfInvalids|function}}
{{APIEntry|
|type=function
|name=numberOfInvalids
|cat=Plugins/Validation/Validator
|return=Integer
|desc=Returns the number of invalid fields.
|longdesc=This depends on the internal validator state. It covers all fields only after validating the complete form (on submit or via $(&quot;form&quot;).valid()). After validating a single element, only that element is counted. Most useful in combination with the invalidHandler-option.
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Displays a summary of invalid fields after a invalid submit.
|code=&lt;nowiki&gt;var validator = $(&quot;#myform&quot;).validate({
  invalidHandler: function() {
    $(&quot;#summary&quot;).text(validator.numberOfInvalids() + &quot; field(s) are invalid&quot;);
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;
{{APIFooter|Plugins/Validation/Validator|numberOfInvalids|function}}</text>
      <sha1>c5nmgox6p3u20076ka8wz3i3h8irv4r</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
  <page>
    <title>Plugins/Validation/Validator/addClassRules</title>
    <ns>0</ns>
    <id>2459</id>
    <revision>
      <id>7587</id>
      <parentid>7586</parentid>
      <timestamp>2008-01-16T22:43:48Z</timestamp>
      <contributor>
        <username>Enchos</username>
        <id>3</id>
      </contributor>
      <text xml:space="preserve" bytes="1455">{{APIHeader|Plugins/Validation/Validator|addClassRules|function}}
{{APIEntry|
|type=function
|name=addClassRules
|cat=Plugins/Validation/Validator
|return=undefined
|desc=Add a compound class method - useful to refactor common combinations of rules into a single class.
|longdesc=
|arg0=name
|arg0type=String
|arg0desc=The name of the class rule to add
|arg1=rules
|arg1type=Options
|arg1desc=The compound rules (see example)
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=&lt;nowiki&gt;Add a new compound rule called &quot;name&quot;, replacing class=&quot;required&quot; minlength=&quot;2&quot; with class=&quot;name&quot;.&lt;/nowiki&gt;
|code=jQuery.validator.{{Code|Plugins/Validation/Validator|addClassRules}}&lt;nowiki&gt;(&quot;name&quot;, {
  required: true,
  minlength: 2
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIEntry|
|type=function
|name=addClassRules
|cat=Plugins/Validation/Validator
|return=undefined
|desc=Add compound class methods - useful to refactor common combinations of rules.
|longdesc=
|arg0=rules
|arg0type=Options
|arg0desc=A map of className-rules pairs (see example).
}}

&lt;noinclude&gt;
{{APIExamples|

{{APIExample|
|desc=Add two compound class rules for name and zip.
|code=jQuery.validator.{{Code|Plugins/Validation/Validator|addClassRules}}&lt;nowiki&gt;({
  name: {
    required: true,
    minlength: 2
  },
  zip: {
    required: true,
    digits: true,
    minlength: 5,
    maxlength: 5
  }
});&lt;/nowiki&gt;
}}

}}
&lt;/noinclude&gt;

{{APIFooter|Plugins/Validation/Validator|addClassRules|function}}</text>
      <sha1>1aml7195lxzyx7xwflgktyn4hano68x</sha1>
      <model>wikitext</model>
      <format>text/x-wiki</format>
    </revision>
  </page>
</mediawiki>
