<?xml version="1.0"?>
<entry name="validate" type="method" return="Validator">
	<title>.validate()</title>
	<desc>Validates the selected form.</desc>
	<longdesc>
		This method sets up event handlers for submit, focus, keyup, blur and click to trigger validation of the entire form or individual elements. Each one can be disabled, see the onxxx options (onsubmit, onfocusout, onkeyup, onclick). focusInvalid focuses elements when submitting a invalid form.
		<p>Use the debug option to ease setting up validation rules, it always prevents the default submit, even when script errors occur.</p>
		<p>Use submitHandler to implement your own form submit, eg. via Ajax. Use invalidHandler to react when an invalid form is submitted.</p>
		<p>Use rules and messages to specify which elements to validate, and how. See <a href="/rules">rules()</a> for more details about specifying validation rules.</p>
		<p>Use errorClass, errorElement, wrapper, errorLabelContainer, errorContainer, showErrors, success, errorPlacement, highlight, unhighlight, and ignoreTitle to control how invalid elements and error messages are displayed.</p>
	</longdesc>
	<signature>
		<argument name="options" type="Object" optional="true">
			<property name="debug" default="false">
				<desc>
					Enables debug mode. If true, the form is not submitted and certain errors are displayed on the console (will check if a <code>window.console</code> property exists). Try to enable when a form is just submitted instead of validation stopping the submit.
					<p><strong>Example</strong>: Prevents the form from submitting and tries to help setting up the validation with warnings about missing methods and other debug messages.</p>
					<pre><code>
					$(".selector").validate({
						debug: true
					});
					</code></pre>
				</desc>
				<type name="Boolean"/>
			</property>
			<property name="submitHandler" default="native form submit">
				<desc>Callback for handling the actual submit when the form is valid. Gets the form as the only argument. Replaces the default submit. The right place to <a href="http://www.malsup.com/jquery/form/#api">submit a form via Ajax</a> after it validated.</desc>
				<type name="Function"/>
				<!--
					{{APIOptionExample|
|desc=Submits the form via Ajax when valid.
|code=$(".selector").validate({
    submitHandler: function(form) {
      $(form).ajaxSubmit();
    }
 })
}}
{{APIOptionExample|
|desc=Use submitHandler to process something and then using the default submit. Note that "form" refers to a DOM element, this way the validation isn't triggered again.
|code=$(".selector").validate({
    submitHandler: function(form) {
        // do other stuff for a valid form
      form.submit();
    }
 })
}}
-->
			</property>
			<property name="invalidHandler">
				<desc>Callback for custom code when an invalid form is submitted. Called with a event object as the first argument, and the validator as the second.</desc>
				<type name="Function"/>
				<!--
					{{APIOptionExample|
|desc=Displays a message above the form, indicating how many fields are invalid when the user tries to submit an invalid form.
|code=$(".selector").validate({
    invalidHandler: function(event, validator) {
      // 'this' refers to the form
      var errors = validator.numberOfInvalids();
      if (errors) {
        var message = errors == 1
          ? 'You missed 1 field. It has been highlighted'
          : 'You missed ' + errors + ' fields. They have been highlighted';
        $("div.error span").html(message);
        $("div.error").show();
      } else {
        $("div.error").hide();
      }
    }
 })
}}
-->
			</property>
			<property name="ignore" default='":hidden"'>
				<desc>Elements to ignore when validating, simply filtering them out. jQuery's not-method is used, therefore everything that is accepted by not() can be passed as this option. Inputs of type submit and reset are always ignored, so are disabled elements.</desc>
				<type name="Selector"/>
<!-- 				{{APIOptionExample|
|desc=Ignores all element with the class "ignore" when validating.
|code=$("#myform").validate({
    ignore: ".ignore"
 })
}} -->
			</property>
			<property name="rules" default="rules are read from markup (classes, attributes, data)">
				<desc>
					Key/value pairs defining custom rules. Key is the name of an element (or a group of checkboxes/radio buttons), value is an object consisting of rule/parameter pairs or a plain String. Can be combined with class/attribute/data rules. Each rule can be specified as having a depends-property to apply the rule only in certain conditions. See the second example below for details.
				</desc>
				<type name="Object"/>
<!-- 				{{APIOptionExample|
|desc=Specifies a name element as required and an email element as required (using the shortcut for a single rule) and a valid email address (using another object literal).
|code=$(".selector").validate({
    rules: {
      // simple rule, converted to {required:true}
      name: "required",
      // compound rule
      email: {
        required: true,
        email: true
      }
    }
 })
}}
{{APIOptionExample|
|desc=Specifies a contact element as required and as email address, the latter depending on a checkbox being checked for contacting via email.
|code=$(".selector").validate({
    rules: {
      contact: {
        required: true,
        email: {
          depends: function(element) {
            return $("#contactform_email:checked")
          }
        }
      }
    }
 })
}} -->
			</property>
			<property name="messages" default="the default message for the method used">
				<desc>
					Key/value pairs defining custom messages. Key is the name of an element, value the message to display for that element. Instead of a plain message another map with specific messages for each rule can be used. Overrides the title attribute of an element or the default message for the method (in that order). Each message can be a String or a Callback. The callback is called in the scope of the validator and with the rule's parameters as the first and the element as the second arugment, it must return a String to display as the message.
				</desc>
				<type name="Object"/>
<!-- 				{{APIOptionExample|
|desc=Specifies a name element as required and an email element as required and a valid email address. A single message is specified for the name element, and two messages for email.
|code=$(".selector").validate({
    rules: {
      name: "required",
      email: {
        required: true,
        email: true
      }
    },
    messages: {
      name: "Please specify your name",
      email: {
        required: "We need your email address to contact you",
        email: "Your email address must be in the format of name@domain.com"
      }
    }
 })
}}
{{APIOptionExample|
|desc=Validates the name-field as required and having at least two characters. Provides a callback message using jQuery.format to avoid having to specify the parameter in two places.
|code=$(".selector").validate({
    rules: {
      name: {
        required: true,
        minlength: 2
      }
    },
    messages: {
      name: {
        required: "We need your email address to contact you",
        minlength: jQuery.format("At least {0} characters required!")
      }
    }
 })
}} -->
			</property>
			<property name="groups">
				<desc>Specify grouping of error messages. A group consists of an arbitrary group name as the key and a space separated list of element names as the value. Use errorPlacement to control where the group message is placed.</desc>
				<type name="Object"/>
<!-- 				{{APIOptionExample|
|desc=Use a table layout for the form, placing error messags in the next cell after the input.
|inhead=&lt;script type="text/javascript" src="http://jzaefferer.github.com/jquery-validation/jquery.validate.js"&gt;&lt;/script&gt;
|html=&lt;form id="myform"&gt;
  &lt;label&gt;Your Name&lt;/label&gt;
  &lt;input name="fname" class="required" value="Pete" /&gt;
  &lt;input name="lname" id="lastname" class="required" /&gt;
  &lt;br/&gt;
  &lt;input type="submit" value="Submit"/&gt;
&lt;/form&gt;
|code=$("#myform").validate({
   groups: {
     username: "fname lname"
   },
   errorPlacement: function(error, element) {
     if (element.attr("name") == "fname"
                 || element.attr("name") == "lname" )
       error.insertAfter("#lastname");
     else
       error.insertAfter(element);
   },
   debug:true
 })
}} -->
			</property>
			<property name="onsubmit">
				<desc>
					Validate the form on submit. Set to false to use only other events for validation.
					<p>Set to a Function to decide yourself when to run validation.</p>
					<p>A boolean true is not a valid value.</p>
				</desc>
				<type name="Boolean"/>
				<type name="Function"/>
<!-- 				{{APIOptionExample|
|desc=Disables onsubmit validation, allowing the user to submit whatever he wants, while still validating on keyup/blur/click events (if not specified otherwise).
|code=$(".selector").validate({
    onsubmit: false
 })
}} -->
			</property>
			<property name="onfocusout">
				<desc>
					Validate elements (except checkboxes/radio buttons) on blur. If nothing is entered, all rules are skipped, except when the field was already marked as invalid.
					<p>Set to a Function to decide yourself when to run validation.</p>
					<p>A boolean true is not a valid value.</p>
				</desc>
				<type name="Boolean"/>
				<type name="Function"/>
				<!--
					{{APIOptionExample|
|desc=Disables onblur validation.
|code=$(".selector").validate({
    onfocusout: false
 })
}}-->
			</property>
			<property name="onkeyup">
				<desc>
					Validate elements on keyup. As long as the field is not marked as invalid, nothing happens. Otherwise, all rules are checked on each key up event. Set to false to disable.
					<p>Set to a Function to decide yourself when to run validation.</p>
					<p>A boolean true is not a valid value.</p>
				</desc>
				<type name="Boolean"/>
				<type name="Function"/>
<!-- 				{{APIOptionExample|
|desc=Disables onkeyup validation.
|code=$(".selector").validate({
    onkeyup: false
 })
}} -->
			</property>
			<property name="onclick">
				<desc>
					Validate checkboxes and radio buttons on click. Set to false to disable.
					<p>Set to a Function to decide yourself when to run validation.</p>
					<p>A boolean true is not a valid value.</p>
				</desc>
				<type name="Boolean"/>
				<type name="Function"/>
<!-- 				{{APIOptionExample|
|desc=Disables onclick validation of checkboxes and radio buttons.
|code=$(".selector").validate({
    onclick: false
 })
}} -->
			</property>
			<property name="focusInvalid" default="true">
				<desc>Focus the last active or first invalid element on submit via validator.focusInvalid(). The last active element is the one that had focus when the form was submitted, avoiding to steal its focus. If there was no element focused, the first one in the form gets it, unless this option is turned off.</desc>
				<type name="Boolean"/>
<!-- 				{{APIOptionExample|
|desc=Disables focusing of invalid elements.
|code=$(".selector").validate({
    focusInvalid: false
 })
}} -->
			</property>
			<property name="focusCleanup" default="false">
				<desc>If enabled, removes the errorClass from the invalid elements and hides all errors messages whenever the element is focused. Avoid combination with focusInvalid.</desc>
				<type name="Boolean"/>
<!-- 				{{APIOptionExample|
|desc=Enables cleanup when focusing elements, removing the error class and hiding error messages when an element is focused.
|code=$(".selector").validate({
    focusCleanup: true
 })
}} -->
			</property>
			<property name="errorClass" default='"error"'>
				<desc>Use this class to create error labels, to look for existing error labels and to add it to invalid elements.</desc>
				<type name="String"/>
<!-- 				{{APIOptionExample|
|desc=Sets the error class to "invalid".
|code=$(".selector").validate({
    errorClass: "invalid"
 })
}} -->
			</property>
			<property name="validClass" default='"valid"'>
				<desc>This class is added to an element after it was validated and considered valid.</desc>
				<type name="String"/>
<!-- 				{{APIOptionExample|
|desc=Sets the valid class to "success".
|code=$(".selector").validate({
    validClass: "success"
 })
}} -->
			</property>
			<property name="errorElement" default='"label"'>
				<desc>se this element type to create error messages and to look for existing error messages. The default, "label", has the advantage of creating a meaningful link between error message and invalid field using the for attribute (which is always used, no matter the element type).</desc>
				<type name="String"/>
<!-- 				{{APIOptionExample|
|desc=Sets the error element to "em".
|code=$(".selector").validate({
    errorElement: "em"
 })
}} -->
			</property>
			<property name="wrapper" default="window">
				<desc>Wrap error labels with the specified element. Useful in combination with errorLabelContainer to create a list of error messages.</desc>
				<type name="String"/>
<!-- 				{{APIOptionExample|
|desc=Wrap each error element with a list item, useful when using an ordered or unordered list as the error container.
|code=$(".selector").validate({
    wrapper: "li"
 })
}} -->
			</property>
			<property name="errorLabelContainer">
				<desc>Hide and show this container when validating.</desc>
				<type name="Selector"/>
<!-- 				{{APIOptionExample|
|desc=All error labels are displayed inside an unordered list with the ID "messageBox", as specified by the selector passed as errorContainer option. All error elements are wrapped inside an li element, to create a list of messages.
|html=&lt;script type="text/javascript" src="http://jzaefferer.github.com/jquery-validation/jquery.validate.js"&gt;&lt;/script&gt;
&lt;ul id="messageBox"&gt;&lt;/ul&gt;
 &lt;form id="myform" action="/login" method="post"&gt;
   &lt;label&gt;Firstname&lt;/label&gt;
   &lt;input name="fname" class="required" /&gt;
   &lt;label&gt;Lastname&lt;/label&gt;
   &lt;input name="lname" title="Your lastname, please!" class="required" /&gt;
   &lt;br/&gt;
   &lt;input type="submit" value="Submit"/&gt;
 &lt;/form&gt;
|code=$("#myform").validate({
    errorLabelContainer: "#messageBox",
    wrapper: "li",
    submitHandler: function() { alert("Submitted!") }
 })
}} -->
			</property>
			<property name="errorContainer">
				<desc>Hide and show this container when validating.</desc>
				<type name="Selector"/>
<!-- 				{{APIOptionExample|
|height=240
|desc=Uses an additonal container for error messages. The elements given as the errorContainer are all shown and hidden when errors occur. But the error labels themselve are added to the element(s) given as errorLabelContainer, here an unordered list. Therefore the error labels are also wrapped into li elements (wrapper option).
|css=#messageBox1, #messageBox2 { display: none }
|html=&lt;script type="text/javascript" src="http://jzaefferer.github.com/jquery-validation/jquery.validate.js"&gt;&lt;/script&gt;
&lt;div id="messageBox1"&gt;
  &lt;ul&gt;&lt;/ul&gt;
&lt;/div&gt;
&lt;form id="myform" action="/login" method="post"&gt;
  &lt;label&gt;Firstname&lt;/label&gt;
  &lt;input name="fname" class="required" /&gt;
  &lt;label&gt;Lastname&lt;/label&gt;
  &lt;input name="lname" title="Your lastname, please!" class="required" /&gt;
  &lt;br/&gt;
  &lt;input type="submit" value="Submit"/&gt;
&lt;/form&gt;
&lt;div id="messageBox2"&gt;
  &lt;h3&gt;There are errors in your form, see details above!&lt;/h3&gt;
&lt;/div&gt;
|code=$("#myform").validate({
    errorContainer: "#messageBox1, #messageBox2",
    errorLabelContainer: "#messageBox1 ul",
    wrapper: "li", debug:true,
    submitHandler: function() { alert("Submitted!") }
 })
}} -->
			</property>
			<property name="showErrors">
				<desc>A custom message display handler. Gets the map of errors as the first argument and and array of errors as the second, called in the context of the validator object. The arguments contain only those elements currently validated, which can be a single element when doing validation onblur/keyup. You can trigger (in addition to your own messages) the default behaviour by calling this.defaultShowErrors().</desc>
				<type name="Function"/>
<!-- 				{{APIOptionExample|
|desc=Update the number of invalid elements each time an error is displayed. Delegates to the default implementation for the actual error display.
|code=$(".selector").validate({
    showErrors: function(errorMap, errorList) {
    $("#summary").html("Your form contains "
                                   + this.numberOfInvalids()
                                   + " errors, see details below.");
    this.defaultShowErrors();
  }
 })
}} -->
			</property>
			<property name="errorPlacement" default="Places the error label after the invalid element">
				<desc>Customize placement of created error labels. First argument: The created error label as a jQuery object. Second argument: The invalid element as a jQuery object.</desc>
				<type name="Function"/>
				<!--
					{{APIOptionExample|
|desc=Use a table layout for the form, placing error messags in the next cell after the input.
|inhead=&lt;script type="text/javascript" src="http://jzaefferer.github.com/jquery-validation/jquery.validate.js"&gt;&lt;/script&gt;
|html=&lt;form id="myform" action="/login" method="post"&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;label&gt;Firstname&lt;/label&gt;
      &lt;td&gt;&lt;input name="fname" class="required" value="Pete" /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;label&gt;Lastname&lt;/label&gt;&lt;/td&gt;
      &lt;td&gt;&lt;input name="lname" title="Your lastname, please!" class="required" /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;input type="submit" value="Submit"/&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;
  &lt;/table&gt;
&lt;/form&gt;
|code=$("#myform").validate({
   errorPlacement: function(error, element) {
     error.appendTo( element.parent("td").next("td") );
   },
   debug:true
 })
}}
-->
			</property>
			<property name="success">
				<desc>If specified, the error label is displayed to show a valid element. If a String is given, its added as a class to the label. If a Function is given, its called with the label (as a jQuery object) as its only argument. That can be used to add a text like "ok!".</desc>
				<type name="String"/>
				<type name="Function"/>
<!-- 				{{APIOptionExample|
|height=60
|desc=Add a class "valid" to valid elements, styled via CSS.
|css=label.valid {
  background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
  height:16px;
  width:16px;
  display: block;
  position: absolute;
  top: 4px;
  left: 152px;
}
|inhead=&lt;script type="text/javascript" src="http://jzaefferer.github.com/jquery-validation/jquery.validate.js"&gt;&lt;/script&gt;
|html=
&lt;form id="myform"&gt;
  &lt;input type="text" name="email" class="required" /&gt;
  &lt;br/&gt;
  &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
|code=$("#myform").validate({
    success: "valid",
    submitHandler: function() { alert("Submitted!") }
 })
}}
{{APIOptionExample|
|height=60
|desc=Add a class "valid" to valid elements, styled via CSS, and add the text "Ok!".
|css=label.valid {
  background: url('http://dev.jquery.com/view/trunk/plugins/validate/demo/images/checked.gif') no-repeat;
  height:16px;
  width:16px;
  display: block;
  position: absolute;
  top: 4px;
  left: 152px;
  padding-left: 18px;
}
|inhead=&lt;script type="text/javascript" src="http://jzaefferer.github.com/jquery-validation/jquery.validate.js"&gt;&lt;/script&gt;
|html=
&lt;form id="myform"&gt;
  &lt;input type="text" name="email" class="required" /&gt;
  &lt;br/&gt;
  &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
|code=$("#myform").validate({
    success: function(label) {
      label.addClass("valid").text("Ok!")
    },
    submitHandler: function() { alert("Submitted!") }
 })
}} -->
			</property>
			<property name="highlight" default="Adds errorClass (see the option) to the element">
				<desc>
					How to highlight invalid fields. Override to decide which fields and how to highlight.
					<p><strong>Example</strong>: Highlights an invalid element by fading it out and in again.</p>
					<pre><code>
					$(".selector").validate({
						highlight: function(element, errorClass) {
							$(element).fadeOut(function() {
								$(element).fadeIn();
							});
						}
					});
					</code></pre>
					<p><strong>Example</strong>: Adds the error class to both the invalid element and it's label</p>
					<pre><code>
					$(".selector").validate({
						highlight: function(element, errorClass, validClass) {
							$(element).addClass(errorClass).removeClass(validClass);
							$(element.form).find("label[for=" + element.id + "]")
								.addClass(errorClass);
						},
						unhighlight: function(element, errorClass, validClass) {
							$(element).removeClass(errorClass).addClass(validClass);
							$(element.form).find("label[for=" + element.id + "]")
								.removeClass(errorClass);
						}
					});
					</code></pre>
					<p>The callback gets passed three arguments:</p>
				</desc>
				<type name="Function"/>
				<property name="element" type="Element">
					<desc>The invalid DOM element, usually an <code>input</code>.</desc>
				</property>
				<property name="errorClass" type="String">
					<desc>Current value of the <code>errorClass</code> option.</desc>
				</property>
				<property name="validClass" type="String">
					<desc>Current value of the <code>validClass</code> option.</desc>
				</property>
			</property>
			<property name="unhighlight" default="Removes the errorClass">
				<desc>Called to revert changes made by option highlight, same arguments as highlight.</desc>
				<type name="Function"/>
			</property>
			<property name="ignoreTitle" default="false">
				<desc>Set to skip reading messages from the title attribute, helps to avoid issues with Google Toolbar; default is false for compability, the message-from-title is likely to be completely removed in a future release</desc>
				<type name="Boolean"/>
				<!--
					{{APIOptionExample|
|desc=Configure the plugin to ignore title attributes on validated elements when looking for messages.
|code=$(".selector").validate({
    ignoreTitle: true
 })
}}-->
			</property>
		</argument>
	</signature>
	<category slug="plugin"/>
</entry>
